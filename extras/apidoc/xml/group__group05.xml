<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="group__group05" kind="group">
    <compoundname>group05</compoundname>
    <title>Deal with Interrupt and I2C bus</title>
    <innerclass refid="class_s_i4735" prot="public">SI4735</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__group05_1ga818c60896490631e4311452c99ff361f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SI4735::SI4735</definition>
        <argsstring>()</argsstring>
        <name>SI4735</name>
        <briefdescription>
<para>Construct a new <ref refid="group__group05_1ga818c60896490631e4311452c99ff361f" kindref="member">SI4735::SI4735</ref> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735/SI4735.h" line="927" column="5" bodyfile="SI4735/SI4735.cpp" bodystart="35" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="group__group05_1gad2e95c88de0dfa58ff7aa36988071421" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::waitInterrupr</definition>
        <argsstring>(void)</argsstring>
        <name>waitInterrupr</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Interrupt handle. </para>
        </briefdescription>
        <detaileddescription>
<para>If you setup interrupt, this function will be called whenever the Si4735 changes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735/SI4735.h" line="918" column="10" bodyfile="SI4735/SI4735.cpp" bodystart="54" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="group__group05_1ga8eddbfb3e62786aa4843d4bcd25da2b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int16_t</type>
        <definition>int16_t SI4735::getDeviceI2CAddress</definition>
        <argsstring>(uint8_t resetPin)</argsstring>
        <name>getDeviceI2CAddress</name>
        <param>
          <type>uint8_t</type>
          <declname>resetPin</declname>
        </param>
        <briefdescription>
<para>I2C bus address setup. </para>
        </briefdescription>
        <detaileddescription>
<para>Scans for two possible addresses for the Si47XX (0x11 or 0x63 )</para>
<para>This function also sets the system to the found I2C bus address of Si47XX.</para>
<para>You do not need to use this function if the SEN PIN is configured to ground (GND). The default I2C address is 0x11. Use this function if you do not know how the SEN pin is configured.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uint8_t</parametername>
</parameternamelist>
<parameterdescription>
<para>resetPin MCU Mater (Arduino) reset pin</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int16_t 0x11 if the SEN pin of the Si47XX is low or 0x63 if the SEN pin of the Si47XX is HIGH or 0x0 if error. <linebreak/>
 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735/SI4735.h" line="1153" column="13" bodyfile="SI4735/SI4735.cpp" bodystart="77" bodyend="105"/>
        <references refid="group__group05_1ga748a4027f317972cb2fb1aed4865973b" compoundref="_s_i4735_8cpp" startline="124" endline="126">SI4735::setDeviceI2CAddress</references>
      </memberdef>
      <memberdef kind="function" id="group__group05_1ga748a4027f317972cb2fb1aed4865973b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::setDeviceI2CAddress</definition>
        <argsstring>(uint8_t senPin)</argsstring>
        <name>setDeviceI2CAddress</name>
        <param>
          <type>uint8_t</type>
          <declname>senPin</declname>
        </param>
        <briefdescription>
<para>Sets the I2C Bus Address. </para>
        </briefdescription>
        <detaileddescription>
<para>The parameter senPin is not the I2C bus address. It is the SEN pin setup of the schematic (eletronic circuit).</para>
<para>If it is connected to the ground, call this function with senPin = 0; else senPin = 1. You do not need to use this function if the SEN PIN configured to ground (GND).</para>
<para>The default value is 0x11 (senPin = 0). In this case you have to ground the pin SEN of the SI473X. If you want to change this address, call this function with senPin = 1</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>senPin</parametername>
</parameternamelist>
<parameterdescription>
<para>0 - when the pin SEN (16 on SSOP version or pin 6 on QFN version) is set to low (GND - 0V) 1 - when the pin SEN (16 on SSOP version or pin 6 on QFN version) is set to high (+3.3V) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735/SI4735.h" line="1152" column="10" bodyfile="SI4735/SI4735.cpp" bodystart="124" bodyend="126"/>
        <references refid="class_s_i4735_1a243ecc7d01fc0d0e9cabb4ed00b9e47d" compoundref="_s_i4735_8h" startline="885">SI4735::deviceAddress</references>
        <referencedby refid="group__group05_1ga8eddbfb3e62786aa4843d4bcd25da2b9" compoundref="_s_i4735_8cpp" startline="77" endline="105">SI4735::getDeviceI2CAddress</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__group05_1ga668008457910e916ebadf15bda2e5b29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::setDeviceOtherI2CAddress</definition>
        <argsstring>(uint8_t i2cAddr)</argsstring>
        <name>setDeviceOtherI2CAddress</name>
        <param>
          <type>uint8_t</type>
          <declname>i2cAddr</declname>
        </param>
        <briefdescription>
<para>Sets the onther I2C Bus Address (for Si470X) </para>
        </briefdescription>
        <detaileddescription>
<para>You can set another I2C address different of 0x11 and 0x63</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uint8_t</parametername>
</parameternamelist>
<parameterdescription>
<para>i2cAddr (example 0x10) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735/SI4735.h" line="1154" column="10" bodyfile="SI4735/SI4735.cpp" bodystart="137" bodyend="139"/>
        <references refid="class_s_i4735_1a243ecc7d01fc0d0e9cabb4ed00b9e47d" compoundref="_s_i4735_8h" startline="885">SI4735::deviceAddress</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>This is a library for the <ref refid="class_s_i4735" kindref="compound">SI4735</ref>, BROADCAST AM/FM/SW RADIO RECEIVER, IC from Silicon Labs for the Arduino development environment. It works with I2C protocol. This library is intended to provide an easier interface for controlling the <ref refid="class_s_i4735" kindref="compound">SI4735</ref>.</para>
<para><simplesect kind="see"><para>documentation on <ulink url="https://github.com/pu2clr/SI4735">https://github.com/pu2clr/SI4735</ulink>. </para>
</simplesect>
<simplesect kind="see"><para>Si47XX PROGRAMMING GUIDE; AN332 </para>
</simplesect>
<simplesect kind="see"><para>AN332 REV 0.8 UNIVERSAL PROGRAMMING GUIDE; AMENDMENT FOR SI4735-D60 SSB AND NBFM PATCHES</para>
</simplesect>
ATTENTION: According to Si47XX PROGRAMMING GUIDE; AN332; page 207, "For write operations, the system controller next sends a data byte on SDIO, which is captured by the device on rising edges of SCLK. The device acknowledges each data byte by driving SDIO low for one cycle on the next falling edge of SCLK. The system controller may write up to 8 data bytes in a single 2-wire transaction. The first byte is a command, and the next seven bytes are arguments. Writing more than 8 bytes results in unpredictable device behavior". So, If you are extending this library, consider that restriction presented earlier.</para>
<para>ATTENTION: Some methods were implemented usin inline resource. Inline methods are implemented in <ref refid="_s_i4735_8h_source" kindref="compound">SI4735.h</ref></para>
<para><simplesect kind="author"><para>PU2CLR - Ricardo Lima Caratti</para>
</simplesect>
By Ricardo Lima Caratti, Nov 2019. </para>
    </detaileddescription>
  </compounddef>
</doxygen>
