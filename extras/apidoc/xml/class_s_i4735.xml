<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="class_s_i4735" kind="class" language="C++" prot="public">
    <compoundname>SI4735</compoundname>
    <includes refid="_s_i4735_8h" local="no">SI4735.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_s_i4735_1a0b40791484c47c0bf90d8dc255a20269" prot="protected" static="no" mutable="no">
        <type>char</type>
        <definition>char SI4735::rds_buffer2A[65]</definition>
        <argsstring>[65]</argsstring>
        <name>rds_buffer2A</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="781" column="10" bodyfile="SI4735.h" bodystart="781" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_i4735_1a7aa607f80e97d45ac7a80cdcbdeb09f9" prot="protected" static="no" mutable="no">
        <type>char</type>
        <definition>char SI4735::rds_buffer2B[33]</definition>
        <argsstring>[33]</argsstring>
        <name>rds_buffer2B</name>
        <briefdescription>
<para>RDS Radio Text buffer - Program Information. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="782" column="10" bodyfile="SI4735.h" bodystart="782" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_i4735_1ac24a8bbd39628c2981208cb452165a0e" prot="protected" static="no" mutable="no">
        <type>char</type>
        <definition>char SI4735::rds_buffer0A[9]</definition>
        <argsstring>[9]</argsstring>
        <name>rds_buffer0A</name>
        <briefdescription>
<para>RDS Radio Text buffer - Station Informaation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="783" column="10" bodyfile="SI4735.h" bodystart="783" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_i4735_1a1746daa81b363880dd106fa430784bf8" prot="protected" static="no" mutable="no">
        <type>char</type>
        <definition>char SI4735::rds_time[20]</definition>
        <argsstring>[20]</argsstring>
        <name>rds_time</name>
        <briefdescription>
<para>RDS Basic tuning and switching information (Type 0 groups) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="784" column="10" bodyfile="SI4735.h" bodystart="784" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_i4735_1a1c7ec3559a78c5ef1bda49cb0abdf1de" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int SI4735::rdsTextAdress2A</definition>
        <argsstring></argsstring>
        <name>rdsTextAdress2A</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="786" column="9" bodyfile="SI4735.h" bodystart="786" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_i4735_1adecc2478d73cd7d18e1f88fd70d1488d" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int SI4735::rdsTextAdress2B</definition>
        <argsstring></argsstring>
        <name>rdsTextAdress2B</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="787" column="9" bodyfile="SI4735.h" bodystart="787" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_i4735_1a11477d1eb13efb348395a4984b67f392" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int SI4735::rdsTextAdress0A</definition>
        <argsstring></argsstring>
        <name>rdsTextAdress0A</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="788" column="9" bodyfile="SI4735.h" bodystart="788" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_i4735_1a243ecc7d01fc0d0e9cabb4ed00b9e47d" prot="protected" static="no" mutable="no">
        <type>int16_t</type>
        <definition>int16_t SI4735::deviceAddress</definition>
        <argsstring></argsstring>
        <name>deviceAddress</name>
        <initializer>= <ref refid="_s_i4735_8h_1a501219f4a661e7aee098f263cba5d2a5" kindref="member">SI473X_ADDR_SEN_LOW</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="790" column="13" bodyfile="SI4735.h" bodystart="790" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_i4735_1abd965c0e49493bc2c7c37547d36dcc96" prot="protected" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t SI4735::lastTextFlagAB</definition>
        <argsstring></argsstring>
        <name>lastTextFlagAB</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="792" column="13" bodyfile="SI4735.h" bodystart="792" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_i4735_1a6470177f747ef7eb8e7d02c76f72b19e" prot="protected" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t SI4735::resetPin</definition>
        <argsstring></argsstring>
        <name>resetPin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="793" column="13" bodyfile="SI4735.h" bodystart="793" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_i4735_1af8f8123888060f858c74ba08a29ff38b" prot="protected" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t SI4735::interruptPin</definition>
        <argsstring></argsstring>
        <name>interruptPin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="794" column="13" bodyfile="SI4735.h" bodystart="794" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_i4735_1acc3d3a411d181e08846219661dbde1c4" prot="protected" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t SI4735::currentTune</definition>
        <argsstring></argsstring>
        <name>currentTune</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="796" column="13" bodyfile="SI4735.h" bodystart="796" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_i4735_1a4663c1c92d980472556368944cb2fc68" prot="protected" static="no" mutable="no">
        <type>uint16_t</type>
        <definition>uint16_t SI4735::currentMinimumFrequency</definition>
        <argsstring></argsstring>
        <name>currentMinimumFrequency</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="798" column="14" bodyfile="SI4735.h" bodystart="798" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_i4735_1aa3d41ad3fdb9d821a721a8acfaf47670" prot="protected" static="no" mutable="no">
        <type>uint16_t</type>
        <definition>uint16_t SI4735::currentMaximumFrequency</definition>
        <argsstring></argsstring>
        <name>currentMaximumFrequency</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="799" column="14" bodyfile="SI4735.h" bodystart="799" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_i4735_1a9da4f3df9e5e6b0448eff15e12f690dd" prot="protected" static="no" mutable="no">
        <type>uint16_t</type>
        <definition>uint16_t SI4735::currentWorkFrequency</definition>
        <argsstring></argsstring>
        <name>currentWorkFrequency</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="800" column="14" bodyfile="SI4735.h" bodystart="800" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_i4735_1ad72759f246cceb147bf031b72173b0ca" prot="protected" static="no" mutable="no">
        <type>uint16_t</type>
        <definition>uint16_t SI4735::currentStep</definition>
        <argsstring></argsstring>
        <name>currentStep</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="802" column="14" bodyfile="SI4735.h" bodystart="802" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_i4735_1a157e4ae8cd53396973584aa10888cd47" prot="protected" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t SI4735::lastMode</definition>
        <argsstring></argsstring>
        <name>lastMode</name>
        <initializer>= -1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="804" column="13" bodyfile="SI4735.h" bodystart="804" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_i4735_1a650490ab792c1853c97f600661ecdaa1" prot="protected" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t SI4735::currentAvcAmMaxGain</definition>
        <argsstring></argsstring>
        <name>currentAvcAmMaxGain</name>
        <initializer>= 48</initializer>
        <briefdescription>
<para>Store the last mode used. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="806" column="13" bodyfile="SI4735.h" bodystart="806" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_i4735_1a4439c40db789f02371ea0fb9b22650c5" prot="protected" static="no" mutable="no">
        <type><ref refid="unionsi47x__frequency" kindref="compound">si47x_frequency</ref></type>
        <definition>si47x_frequency SI4735::currentFrequency</definition>
        <argsstring></argsstring>
        <name>currentFrequency</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="808" column="21" bodyfile="SI4735.h" bodystart="808" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_i4735_1a8253ae2f3c87a6943776f8a63a691ca3" prot="protected" static="no" mutable="no">
        <type><ref refid="unionsi47x__set__frequency" kindref="compound">si47x_set_frequency</ref></type>
        <definition>si47x_set_frequency SI4735::currentFrequencyParams</definition>
        <argsstring></argsstring>
        <name>currentFrequencyParams</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="809" column="25" bodyfile="SI4735.h" bodystart="809" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_i4735_1a9edd8cc9254695631795e7efc008eb28" prot="protected" static="no" mutable="no">
        <type><ref refid="unionsi47x__rqs__status" kindref="compound">si47x_rqs_status</ref></type>
        <definition>si47x_rqs_status SI4735::currentRqsStatus</definition>
        <argsstring></argsstring>
        <name>currentRqsStatus</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="810" column="22" bodyfile="SI4735.h" bodystart="810" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_i4735_1a7ad35ba002b73b66e9ce97b304854695" prot="protected" static="no" mutable="no">
        <type><ref refid="unionsi47x__response__status" kindref="compound">si47x_response_status</ref></type>
        <definition>si47x_response_status SI4735::currentStatus</definition>
        <argsstring></argsstring>
        <name>currentStatus</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="811" column="27" bodyfile="SI4735.h" bodystart="811" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_i4735_1ad03d545e53a7ca2fe072a7b03d60910e" prot="protected" static="no" mutable="no">
        <type><ref refid="unionsi47x__firmware__information" kindref="compound">si47x_firmware_information</ref></type>
        <definition>si47x_firmware_information SI4735::firmwareInfo</definition>
        <argsstring></argsstring>
        <name>firmwareInfo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="812" column="32" bodyfile="SI4735.h" bodystart="812" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_i4735_1a42d5c6991d90ea1c8ae35b74f8bccc48" prot="protected" static="no" mutable="no">
        <type><ref refid="unionsi47x__rds__status" kindref="compound">si47x_rds_status</ref></type>
        <definition>si47x_rds_status SI4735::currentRdsStatus</definition>
        <argsstring></argsstring>
        <name>currentRdsStatus</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="813" column="22" bodyfile="SI4735.h" bodystart="813" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_i4735_1adf2d1f37ec9edf95e14aecb3cdc7417d" prot="protected" static="no" mutable="no">
        <type><ref refid="unionsi47x__agc__status" kindref="compound">si47x_agc_status</ref></type>
        <definition>si47x_agc_status SI4735::currentAgcStatus</definition>
        <argsstring></argsstring>
        <name>currentAgcStatus</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="814" column="22" bodyfile="SI4735.h" bodystart="814" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_i4735_1a74ee9c99b1e092f7b1efa2f771f38324" prot="protected" static="no" mutable="no">
        <type><ref refid="unionsi47x__ssb__mode" kindref="compound">si47x_ssb_mode</ref></type>
        <definition>si47x_ssb_mode SI4735::currentSSBMode</definition>
        <argsstring></argsstring>
        <name>currentSSBMode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="815" column="20" bodyfile="SI4735.h" bodystart="815" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_i4735_1a1331b701088bda20bf0844e2e38be142" prot="protected" static="no" mutable="no">
        <type><ref refid="unionsi473x__powerup" kindref="compound">si473x_powerup</ref></type>
        <definition>si473x_powerup SI4735::powerUp</definition>
        <argsstring></argsstring>
        <name>powerUp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="817" column="20" bodyfile="SI4735.h" bodystart="817" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_i4735_1aa5220772c468fcfb69b5d16163de73fc" prot="protected" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t SI4735::volume</definition>
        <argsstring></argsstring>
        <name>volume</name>
        <initializer>= 32</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="819" column="13" bodyfile="SI4735.h" bodystart="819" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_i4735_1a05730ca069db4be7c45a9c92f29d3b52" prot="protected" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t SI4735::currentSsbStatus</definition>
        <argsstring></argsstring>
        <name>currentSsbStatus</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="821" column="13" bodyfile="SI4735.h" bodystart="821" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_s_i4735_1ad2e95c88de0dfa58ff7aa36988071421" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::waitInterrupr</definition>
        <argsstring>(void)</argsstring>
        <name>waitInterrupr</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If you setup interrupt, this function will be called whenever the Si4735 changes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="823" column="10" bodyfile="SI4735.cpp" bodystart="45" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1ae351181347f8c512b625d98ef7844961" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::sendProperty</definition>
        <argsstring>(uint16_t propertyValue, uint16_t param)</argsstring>
        <name>sendProperty</name>
        <param>
          <type>uint16_t</type>
          <declname>propertyValue</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>param</declname>
          <defname>parameter</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sends (sets) property to the SI47XX This method is used for others to send generic properties and params to SI47XX</para>
<para><simplesect kind="see"><para>Si47XX PROGRAMMING GUIDE; AN332; pages 68, 124 and 133. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="824" column="10" bodyfile="SI4735.cpp" bodystart="603" bodyend="620"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1ae1d866bfc4cb37c4268c8942b4b4d062" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::sendSSBModeProperty</definition>
        <argsstring>()</argsstring>
        <name>sendSSBModeProperty</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Just send the property SSB_MOD to the device. Internal use (privete method). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="825" column="10" bodyfile="SI4735.cpp" bodystart="2006" bodyend="2021"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1ae4683e9a9fc7a633305b18dae54fbd83" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::disableFmDebug</definition>
        <argsstring>()</argsstring>
        <name>disableFmDebug</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>There is a debug feature that remains active in Si4704/05/3x-D60 firmware which can create periodic noise in audio. Silicon Labs recommends you disable this feature by sending the following bytes (shown here in hexadecimal form): 0x12 0x00 0xFF 0x00 0x00 0x00.</para>
<para><simplesect kind="see"><para>Si47XX PROGRAMMING GUIDE; AN332; page 299. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="826" column="10" bodyfile="SI4735.cpp" bodystart="749" bodyend="760"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1ac65c552004f5e5e646638e37a5a68213" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::clearRdsBuffer2A</definition>
        <argsstring>()</argsstring>
        <name>clearRdsBuffer2A</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Clear RDS buffer 2A (text) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="827" column="10" bodyfile="SI4735.cpp" bodystart="1213" bodyend="1217"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1aed0988165057aa2880f41b88ac236cd7" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::clearRdsBuffer2B</definition>
        <argsstring>()</argsstring>
        <name>clearRdsBuffer2B</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Clear RDS buffer 2B (text) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="828" column="10" bodyfile="SI4735.cpp" bodystart="1223" bodyend="1227"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1adede134b96fd5650b87673ce413babb2" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::clearRdsBuffer0A</definition>
        <argsstring>()</argsstring>
        <name>clearRdsBuffer0A</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Clear RDS buffer 0A (text) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="829" column="10" bodyfile="SI4735.cpp" bodystart="1232" bodyend="1236"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_s_i4735_1a818c60896490631e4311452c99ff361f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SI4735::SI4735</definition>
        <argsstring>()</argsstring>
        <name>SI4735</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is a library for the <ref refid="class_s_i4735" kindref="compound">SI4735</ref>, BROADCAST AM/FM/SW RADIO RECEIVER, IC from Silicon Labs for the Arduino development environment. It works with I2C protocol. This library is intended to provide an easier interface for controlling the <ref refid="class_s_i4735" kindref="compound">SI4735</ref>. <simplesect kind="see"><para>documentation on <ulink url="https://github.com/pu2clr/SI4735">https://github.com/pu2clr/SI4735</ulink>.</para>
</simplesect>
<simplesect kind="see"><para>also: Si47XX PROGRAMMING GUIDE; AN332 AN332 REV 0.8 UNIVERSAL PROGRAMMING GUIDE; AMENDMENT FOR SI4735-D60 SSB AND NBFM PATCHES</para>
</simplesect>
Pay attention: According to Si47XX PROGRAMMING GUIDE; AN332; page 207, "For write operations, the system controller next sends a data byte on SDIO, which is captured by the device on rising edges of SCLK. The device acknowledges each data byte by driving SDIO low for one cycle on the next falling edge of SCLK. The system controller may write up to 8 data bytes in a single 2-wire transaction. The first byte is a command, and the next seven bytes are arguments. Writing more than 8 bytes results in unpredictable device behavior". So, If you are extending this library, consider that restriction presented earlier.</para>
<para>ATTENTION: Some methods were implemented usin inline resource. Inline methods are implemented in <ref refid="_s_i4735_8h" kindref="compound">SI4735.h</ref></para>
<para>By Ricardo Lima Caratti, Nov 2019. Construct a new <ref refid="class_s_i4735_1a818c60896490631e4311452c99ff361f" kindref="member">SI4735::SI4735</ref> object </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="832" column="5" bodyfile="SI4735.cpp" bodystart="30" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1adc6014674bd4d1ee3aab56c605926db1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::reset</definition>
        <argsstring>(void)</argsstring>
        <name>reset</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reset the SI473X <linebreak/>
 <simplesect kind="see"><para>Si47XX PROGRAMMING GUIDE; AN332; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="833" column="10" bodyfile="SI4735.cpp" bodystart="126" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a7b45c1b22c3c1a3f2326bee913d1e1e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::waitToSend</definition>
        <argsstring>(void)</argsstring>
        <name>waitToSend</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Wait for the si473x is ready (Clear to Send (CTS) status bit have to be 1). <linebreak/>
 This function should be used before sending any command to a SI47XX device. <simplesect kind="see"><para>Si47XX PROGRAMMING GUIDE; AN332; pages 63, 128 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="834" column="10" bodyfile="SI4735.cpp" bodystart="141" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a944ed704e2175a6cf660ad65ca5bbad5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::setup</definition>
        <argsstring>(uint8_t resetPin, uint8_t defaultFunction)</argsstring>
        <name>setup</name>
        <param>
          <type>uint8_t</type>
          <declname>resetPin</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>defaultFunction</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Starts the Si473X device. <linebreak/>
 Use this setup if you are not using interrupt resource</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uint8_t</parametername>
</parameternamelist>
<parameterdescription>
<para>resetPin Digital Arduino Pin used to RESET command </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>uint8_t</parametername>
</parameternamelist>
<parameterdescription>
<para>defaultFunction </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="837" column="10" bodyfile="SI4735.cpp" bodystart="322" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a95fd37277dbb8b16b5ae7a996a5f9eba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::setup</definition>
        <argsstring>(uint8_t resetPin, int interruptPin, uint8_t defaultFunction, uint8_t audioMode=SI473X_ANALOG_AUDIO)</argsstring>
        <name>setup</name>
        <param>
          <type>uint8_t</type>
          <declname>resetPin</declname>
        </param>
        <param>
          <type>int</type>
          <declname>interruptPin</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>defaultFunction</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>audioMode</declname>
          <defval><ref refid="_s_i4735_8h_1afd6b0255af56b3deee67ef1fe14d2fd6" kindref="member">SI473X_ANALOG_AUDIO</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Starts the Si473X device.</para>
<para>If the audio mode parameter is not entered, analog mode will be considered.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uint8_t</parametername>
</parameternamelist>
<parameterdescription>
<para>resetPin Digital Arduino Pin used to RESET command </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>uint8_t</parametername>
</parameternamelist>
<parameterdescription>
<para>interruptPin interrupt Arduino Pin (see your Arduino pinout). If less than 0, iterrupt disabled </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>uint8_t</parametername>
</parameternamelist>
<parameterdescription>
<para>defaultFunction </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>uint8_t</parametername>
</parameternamelist>
<parameterdescription>
<para>audioMode default SI473X_ANALOG_AUDIO (Analog Audio). Use SI473X_ANALOG_AUDIO or SI473X_DIGITAL_AUDIO </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="838" column="10" bodyfile="SI4735.cpp" bodystart="279" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a8bc001cb28dc8fbd88ba0fa7024eca39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::setPowerUp</definition>
        <argsstring>(uint8_t CTSIEN, uint8_t GPO2OEN, uint8_t PATCH, uint8_t XOSCEN, uint8_t FUNC, uint8_t OPMODE)</argsstring>
        <name>setPowerUp</name>
        <param>
          <type>uint8_t</type>
          <declname>CTSIEN</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>GPO2OEN</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>PATCH</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>XOSCEN</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>FUNC</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>OPMODE</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the Power Up parameters for si473X. Use this method to chenge the defaul behavior of the Si473X. Use it before PowerUp()</para>
<para><simplesect kind="see"><para>Si47XX PROGRAMMING GUIDE; AN332; pages 65 and 129</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uint8_t</parametername>
</parameternamelist>
<parameterdescription>
<para>CTSIEN sets Interrupt anabled or disabled (1 = anabled and 0 = disabled ) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>uint8_t</parametername>
</parameternamelist>
<parameterdescription>
<para>GPO2OEN sets GP02 Si473X pin enabled (1 = anabled and 0 = disabled ) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>uint8_t</parametername>
</parameternamelist>
<parameterdescription>
<para>PATCH Used for firmware patch updates. Use it always 0 here. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>uint8_t</parametername>
</parameternamelist>
<parameterdescription>
<para>XOSCEN sets external Crystal enabled or disabled </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>uint8_t</parametername>
</parameternamelist>
<parameterdescription>
<para>FUNC sets the receiver function have to be used [0 = FM Receive; 1 = AM (LW/MW/SW) and SSB (if SSB patch apllied)] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>uint8_t</parametername>
</parameternamelist>
<parameterdescription>
<para>OPMODE set the kind of audio mode you want to use. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="840" column="10" bodyfile="SI4735.cpp" bodystart="163" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a3e228da65641f4dcf4253262e19bde9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::radioPowerUp</definition>
        <argsstring>(void)</argsstring>
        <name>radioPowerUp</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Powerup the Si47XX Before call this function call the setPowerUp to set up the parameters. Parameters you have to set up with setPowerUp</para>
<para>CTSIEN Interrupt anabled or disabled; GPO2OEN GPO2 Output Enable or disabled; PATCH Boot normally or patch; XOSCEN Use external crystal oscillator; FUNC defaultFunction = 0 = FM Receive; 1 = AM (LW/MW/SW) Receiver. OPMODE SI473X_ANALOG_AUDIO (B00000101) or SI473X_DIGITAL_AUDIO (B00001011)</para>
<para><simplesect kind="see"><para><ref refid="class_s_i4735_1a8bc001cb28dc8fbd88ba0fa7024eca39" kindref="member">SI4735::setPowerUp()</ref> </para>
</simplesect>
<simplesect kind="see"><para>Si47XX PROGRAMMING GUIDE; AN332; pages 64, 129 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="841" column="10" bodyfile="SI4735.cpp" bodystart="206" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a412f51386c47a17cf04fd0a3c3078726" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::analogPowerUp</definition>
        <argsstring>(void)</argsstring>
        <name>analogPowerUp</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Powerup in Analog Mode. It will be deprecated. Consider use radioPowerUp instead. Actually this function works fo Digital and Analog modes. You have to call setPowerUp method before. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="842" column="10" bodyfile="SI4735.cpp" bodystart="225" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1aa554b3390fb6c5a4d6661b96afae73ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::powerDown</definition>
        <argsstring>(void)</argsstring>
        <name>powerDown</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Moves the device from powerup to powerdown mode. After Power Down command, only the Power Up command is accepted.</para>
<para><simplesect kind="see"><para>Si47XX PROGRAMMING GUIDE; AN332; pages 67, 132 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="843" column="10" bodyfile="SI4735.cpp" bodystart="236" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a63d205f2d3169ba877a2bd2ee28d224f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::setFrequency</definition>
        <argsstring>(uint16_t)</argsstring>
        <name>setFrequency</name>
        <param>
          <type>uint16_t</type>
          <defname>freq</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the frequency to the corrent function of the Si4735 (FM, AM or SSB) You have to call setup or setPowerUp before call setFrequency.</para>
<para><simplesect kind="see"><para>Si47XX PROGRAMMING GUIDE; AN332; pages 70, 135 </para>
</simplesect>
<simplesect kind="see"><para>AN332 REV 0.8 UNIVERSAL PROGRAMMING GUIDE; page 13</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uint16_t</parametername>
</parameternamelist>
<parameterdescription>
<para>freq Is the frequency to change. For example, FM =&gt; 10390 = 103.9 MHz; AM =&gt; 810 = 810 KHz. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="845" column="10" bodyfile="SI4735.cpp" bodystart="376" bodyend="405"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a3cf856c44fcfffb3d81b22b1d09b881f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::getStatus</definition>
        <argsstring>()</argsstring>
        <name>getStatus</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the current status of the Si4735 (AM or FM)</para>
<para><simplesect kind="see"><para>Si47XX PROGRAMMING GUIDE; AN332; pages 73 (FM) and 139 (AM) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="848" column="10" bodyfile="SI4735.cpp" bodystart="872" bodyend="875"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a5c0f4036a7fbbd11a26f1f6f4579d3cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::getStatus</definition>
        <argsstring>(uint8_t, uint8_t)</argsstring>
        <name>getStatus</name>
        <param>
          <type>uint8_t</type>
          <defname>INTACK</defname>
        </param>
        <param>
          <type>uint8_t</type>
          <defname>CANCEL</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the current status of the Si4735 (AM or FM) <simplesect kind="see"><para>Si47XX PROGRAMMING GUIDE; AN332; pages 73 (FM) and 139 (AM)</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uint8_t</parametername>
</parameternamelist>
<parameterdescription>
<para>INTACK Seek/Tune Interrupt Clear. If set, clears the seek/tune complete interrupt status indicator; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>uint8_t</parametername>
</parameternamelist>
<parameterdescription>
<para>CANCEL Cancel seek. If set, aborts a seek currently in progress; </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="849" column="10" bodyfile="SI4735.cpp" bodystart="841" bodyend="865"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a7e88bb573604d465536c13554d5c61f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t SI4735::getFrequency</definition>
        <argsstring>(void)</argsstring>
        <name>getFrequency</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the current frequency of the Si4735 (AM or FM) The method status do it an more. See getStatus below.</para>
<para><simplesect kind="see"><para>Si47XX PROGRAMMING GUIDE; AN332; pages 73 (FM) and 139 (AM) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="852" column="14" bodyfile="SI4735.cpp" bodystart="809" bodyend="819"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a8240278970ae8bf7283e14714b4329ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t SI4735::getCurrentFrequency</definition>
        <argsstring>()</argsstring>
        <name>getCurrentFrequency</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the current frequency saved in memory. Unlike getFrequency, this method gets the current frequency recorded after the last setFrequency command. This method avoids bus traffic and CI processing. However, you can not get others status information like RSSI.</para>
<para><simplesect kind="see"><para><ref refid="class_s_i4735_1a7e88bb573604d465536c13554d5c61f8" kindref="member">getFrequency()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="853" column="14" bodyfile="SI4735.cpp" bodystart="829" bodyend="832"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1ad194137a6a712a599e3c26e5b6357594" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SI4735::getSignalQualityInterrupt</definition>
        <argsstring>()</argsstring>
        <name>getSignalQualityInterrupt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>STATUS RESPONSE Set of methods to get current status information. Call them after getStatus or getFrequency or seekStation See Si47XX PROGRAMMING GUIDE; AN332; pages 63 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="861" column="17" bodyfile="SI4735.h" bodystart="861" bodyend="861"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a97dc44d9927ea58730a18fb6baa6867f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SI4735::getRadioDataSystemInterrupt</definition>
        <argsstring>()</argsstring>
        <name>getRadioDataSystemInterrupt</name>
        <briefdescription>
<para>Gets Received Signal Quality Interrupt(RSQINT) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="862" column="17" bodyfile="SI4735.h" bodystart="862" bodyend="862"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a2cc659bddc5efc7695f2a6031c2edd4b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SI4735::getTuneCompleteTriggered</definition>
        <argsstring>()</argsstring>
        <name>getTuneCompleteTriggered</name>
        <briefdescription>
<para>Gets Radio Data System (RDS) Interrupt. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="863" column="17" bodyfile="SI4735.h" bodystart="863" bodyend="863"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a69723840497ed693d6f9a4e840ab07c9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SI4735::getStatusError</definition>
        <argsstring>()</argsstring>
        <name>getStatusError</name>
        <briefdescription>
<para>Seek/Tune Complete Interrupt; 1 = Tune complete has been triggered. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="864" column="17" bodyfile="SI4735.h" bodystart="864" bodyend="864"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1afcb38f53b6eb71cadcefa0bb472ca943" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SI4735::getStatusCTS</definition>
        <argsstring>()</argsstring>
        <name>getStatusCTS</name>
        <briefdescription>
<para>Return the Error flag (true or false) of status of the least Tune or Seek. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="865" column="17" bodyfile="SI4735.h" bodystart="865" bodyend="865"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1ab8a51de592fd40fdd872039b3c70716f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SI4735::getACFIndicator</definition>
        <argsstring>()</argsstring>
        <name>getACFIndicator</name>
        <briefdescription>
<para>Gets the Error flag of status response. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="866" column="17" bodyfile="SI4735.h" bodystart="866" bodyend="866"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a19e96565a2dec7ec68469f45c8d3e084" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SI4735::getBandLimit</definition>
        <argsstring>()</argsstring>
        <name>getBandLimit</name>
        <briefdescription>
<para>Returns true if the AFC rails (AFC Rail Indicator). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="867" column="17" bodyfile="SI4735.h" bodystart="867" bodyend="867"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1afb19da8a05320d7f38cca8325725edfd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SI4735::getStatusValid</definition>
        <argsstring>()</argsstring>
        <name>getStatusValid</name>
        <briefdescription>
<para>Returns true if a seek hit the band limit (WRAP = 0 in FM_START_SEEK) or wrapped to the original frequency(WRAP = 1). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="868" column="17" bodyfile="SI4735.h" bodystart="868" bodyend="868"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1aeeefd12b49dbc764e0f45fe208441482" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t SI4735::getReceivedSignalStrengthIndicator</definition>
        <argsstring>()</argsstring>
        <name>getReceivedSignalStrengthIndicator</name>
        <briefdescription>
<para>Returns true if the channel is currently valid as determined by the seek/tune properties (0x1403, 0x1404, 0x1108) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="869" column="20" bodyfile="SI4735.h" bodystart="869" bodyend="869"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1ac0bd4daaa321ef8956dca4d1e4e5cd3c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t SI4735::getStatusSNR</definition>
        <argsstring>()</argsstring>
        <name>getStatusSNR</name>
        <briefdescription>
<para>Returns integer Received Signal Strength Indicator (dBμV). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="870" column="20" bodyfile="SI4735.h" bodystart="870" bodyend="870"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a0f9b5438a6f92c8f2e538ee640f353ab" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t SI4735::getStatusMULT</definition>
        <argsstring>()</argsstring>
        <name>getStatusMULT</name>
        <briefdescription>
<para>Returns integer containing the SNR metric when tune is complete (dB). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="871" column="20" bodyfile="SI4735.h" bodystart="871" bodyend="871"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a3905d6551992b4dd51d13f05978d9081" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t SI4735::getAntennaTuningCapacitor</definition>
        <argsstring>()</argsstring>
        <name>getAntennaTuningCapacitor</name>
        <briefdescription>
<para>Returns integer containing the multipath metric when tune is complete. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="872" column="20" bodyfile="SI4735.h" bodystart="872" bodyend="872"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1aaae187575b9868ff427c063c3a6cca2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::getAutomaticGainControl</definition>
        <argsstring>()</argsstring>
        <name>getAutomaticGainControl</name>
        <briefdescription>
<para>Returns integer containing the current antenna tuning capacitor value. </para>
        </briefdescription>
        <detaileddescription>
<para>Queries AGC STATUS</para>
<para><simplesect kind="see"><para>Si47XX PROGRAMMING GUIDE; AN332; For FM page 80; for AM page 142. </para>
</simplesect>
<simplesect kind="see"><para>AN332 REV 0.8 Universal Programming Guide Amendment for SI4735-D60 SSB and NBFM patches; page 18.</para>
</simplesect>
After call this method, you can call isAgcEnabled to know the AGC status and getAgcGainIndex to know the gain index value. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="874" column="10" bodyfile="SI4735.cpp" bodystart="885" bodyend="912"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a98d12da4b801493a350ecf770f4f2d8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::setAvcAmMaxGain</definition>
        <argsstring>(uint8_t gain)</argsstring>
        <name>setAvcAmMaxGain</name>
        <param>
          <type>uint8_t</type>
          <declname>gain</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the maximum gain for automatic volume control. If no parameter is sent, it will be consider 48dB.</para>
<para><simplesect kind="see"><para>Si47XX PROGRAMMING GUIDE; AN332; page 152</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uint8_t</parametername>
</parameternamelist>
<parameterdescription>
<para>gain Select a value between 12 and 192. Defaul value 48dB. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="876" column="10" bodyfile="SI4735.cpp" bodystart="956" bodyend="961"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a6e1e0e48d71e09debb07fc6dbe884829" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::setAvcAmMaxGain</definition>
        <argsstring>()</argsstring>
        <name>setAvcAmMaxGain</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="877" column="17" bodyfile="SI4735.h" bodystart="877" bodyend="877"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a27dd7dfd46583eb5be91cfc9461807ff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t SI4735::getCurrentAvcAmMaxGain</definition>
        <argsstring>()</argsstring>
        <name>getCurrentAvcAmMaxGain</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="878" column="20" bodyfile="SI4735.h" bodystart="878" bodyend="878"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1acc57f6bde08e94462a9d75fe28a66ea8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::setAmSoftMuteMaxAttenuation</definition>
        <argsstring>(uint8_t smattn)</argsstring>
        <name>setAmSoftMuteMaxAttenuation</name>
        <param>
          <type>uint8_t</type>
          <declname>smattn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="880" column="17" bodyfile="SI4735.h" bodystart="880" bodyend="880"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1ac1af311f799e8a007cbd048a88f1abe9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::setAmSoftMuteMaxAttenuation</definition>
        <argsstring>()</argsstring>
        <name>setAmSoftMuteMaxAttenuation</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="881" column="17" bodyfile="SI4735.h" bodystart="881" bodyend="881"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1ad357ccc5f207ec11d36d9569046c098f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::setSsbSoftMuteMaxAttenuation</definition>
        <argsstring>(uint8_t smattn)</argsstring>
        <name>setSsbSoftMuteMaxAttenuation</name>
        <param>
          <type>uint8_t</type>
          <declname>smattn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="883" column="17" bodyfile="SI4735.h" bodystart="883" bodyend="883"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1afd057daf737a78a50ad1a03a6b43a111" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::setSsbSoftMuteMaxAttenuation</definition>
        <argsstring>()</argsstring>
        <name>setSsbSoftMuteMaxAttenuation</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="884" column="17" bodyfile="SI4735.h" bodystart="884" bodyend="884"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1aea08b7e553212cbe01bf6f4ec9e02de7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SI4735::isAgcEnabled</definition>
        <argsstring>()</argsstring>
        <name>isAgcEnabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="887" column="17" bodyfile="SI4735.h" bodystart="887" bodyend="887"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a4eceaf5745e87fcca6cf31c04c5635bd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t SI4735::getAgcGainIndex</definition>
        <argsstring>()</argsstring>
        <name>getAgcGainIndex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="888" column="20" bodyfile="SI4735.h" bodystart="888" bodyend="888"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a27c22f5671ce3229e925e5fbe93ba0a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::setAutomaticGainControl</definition>
        <argsstring>(uint8_t AGCDIS, uint8_t AGCIDX)</argsstring>
        <name>setAutomaticGainControl</name>
        <param>
          <type>uint8_t</type>
          <declname>AGCDIS</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>AGCIDX</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If FM, overrides AGC setting by disabling the AGC and forcing the LNA to have a certain gain that ranges between 0 (minimum attenuation) and 26 (maximum attenuation); If AM/SSB, Overrides the AM AGC setting by disabling the AGC and forcing the gain index that ranges between 0 (minimum attenuation) and 37+ATTN_BACKUP (maximum attenuation);</para>
<para><simplesect kind="see"><para>Si47XX PROGRAMMING GUIDE; AN332; For FM page 81; for AM page 143</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uint8_t</parametername>
</parameternamelist>
<parameterdescription>
<para>AGCDIS This param selects whether the AGC is enabled or disabled (0 = AGC enabled; 1 = AGC disabled); </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>uint8_t</parametername>
</parameternamelist>
<parameterdescription>
<para>AGCIDX AGC Index (0 = Minimum attenuation (max gain); 1 – 36 = Intermediate attenuation); if &gt;greater than 36 - Maximum attenuation (min gain) ). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="889" column="10" bodyfile="SI4735.cpp" bodystart="926" bodyend="946"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1abf59183da13c72384093fc238c3114cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::getCurrentReceivedSignalQuality</definition>
        <argsstring>(uint8_t INTACK)</argsstring>
        <name>getCurrentReceivedSignalQuality</name>
        <param>
          <type>uint8_t</type>
          <declname>INTACK</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Queries the status of the Received Signal Quality (RSQ) of the current channel. This method sould be called berore call <ref refid="class_s_i4735_1a4f5abf562ec00767a3b84f74eba5ac4d" kindref="member">getCurrentRSSI()</ref>, <ref refid="class_s_i4735_1adb3fe55583dafeac7439a303b637d162" kindref="member">getCurrentSNR()</ref> etc. Command FM_RSQ_STATUS</para>
<para><simplesect kind="see"><para>Si47XX PROGRAMMING GUIDE; AN332; pages 75 and 141</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>INTACK</parametername>
</parameternamelist>
<parameterdescription>
<para>Interrupt Acknowledge. 0 = Interrupt status preserved; 1 = Clears RSQINT, BLENDINT, SNRHINT, SNRLINT, RSSIHINT, RSSILINT, MULTHINT, MULTLINT. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="891" column="10" bodyfile="SI4735.cpp" bodystart="974" bodyend="1008"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a7393fa4f9d7811c8d0c0f48283ef6435" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::getCurrentReceivedSignalQuality</definition>
        <argsstring>(void)</argsstring>
        <name>getCurrentReceivedSignalQuality</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Queries the status of the Received Signal Quality (RSQ) of the current channel Command FM_RSQ_STATUS</para>
<para><simplesect kind="see"><para>Si47XX PROGRAMMING GUIDE; AN332; pages 75 and 141</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>INTACK</parametername>
</parameternamelist>
<parameterdescription>
<para>Interrupt Acknowledge. 0 = Interrupt status preserved; 1 = Clears RSQINT, BLENDINT, SNRHINT, SNRLINT, RSSIHINT, RSSILINT, MULTHINT, MULTLINT. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="892" column="10" bodyfile="SI4735.cpp" bodystart="1020" bodyend="1023"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a4f5abf562ec00767a3b84f74eba5ac4d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t SI4735::getCurrentRSSI</definition>
        <argsstring>()</argsstring>
        <name>getCurrentRSSI</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="895" column="20" bodyfile="SI4735.h" bodystart="895" bodyend="895"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1adb3fe55583dafeac7439a303b637d162" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t SI4735::getCurrentSNR</definition>
        <argsstring>()</argsstring>
        <name>getCurrentSNR</name>
        <briefdescription>
<para>current receive signal strength (0–127 dBμV). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="896" column="20" bodyfile="SI4735.h" bodystart="896" bodyend="896"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a0c9ae82012cdc97c4080b84e37fa1820" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SI4735::getCurrentRssiDetectLow</definition>
        <argsstring>()</argsstring>
        <name>getCurrentRssiDetectLow</name>
        <briefdescription>
<para>current SNR metric (0–127 dB). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="897" column="17" bodyfile="SI4735.h" bodystart="897" bodyend="897"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1adf11a66236392ca107b5d52a8747f838" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SI4735::getCurrentRssiDetectHigh</definition>
        <argsstring>()</argsstring>
        <name>getCurrentRssiDetectHigh</name>
        <briefdescription>
<para>RSSI Detect Low. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="898" column="17" bodyfile="SI4735.h" bodystart="898" bodyend="898"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a1296592571c85b89ed59a4ee2324bd52" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SI4735::getCurrentSnrDetectLow</definition>
        <argsstring>()</argsstring>
        <name>getCurrentSnrDetectLow</name>
        <briefdescription>
<para>RSSI Detect High. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="899" column="17" bodyfile="SI4735.h" bodystart="899" bodyend="899"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1aec3c71a3252dd6660e5bceebc0d1f988" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SI4735::getCurrentSnrDetectHigh</definition>
        <argsstring>()</argsstring>
        <name>getCurrentSnrDetectHigh</name>
        <briefdescription>
<para>SNR Detect Low. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="900" column="17" bodyfile="SI4735.h" bodystart="900" bodyend="900"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a5ce1abf8c9d53c027f6b0870efedda1b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SI4735::getCurrentValidChannel</definition>
        <argsstring>()</argsstring>
        <name>getCurrentValidChannel</name>
        <briefdescription>
<para>SNR Detect High. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="901" column="17" bodyfile="SI4735.h" bodystart="901" bodyend="901"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1affe5cee9daf44677802a94f96d893c94" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SI4735::getCurrentAfcRailIndicator</definition>
        <argsstring>()</argsstring>
        <name>getCurrentAfcRailIndicator</name>
        <briefdescription>
<para>Valid Channel. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="902" column="17" bodyfile="SI4735.h" bodystart="902" bodyend="902"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a76e8485292878c1294e5910601f4575f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SI4735::getCurrentSoftMuteIndicator</definition>
        <argsstring>()</argsstring>
        <name>getCurrentSoftMuteIndicator</name>
        <briefdescription>
<para>AFC Rail Indicator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="903" column="17" bodyfile="SI4735.h" bodystart="903" bodyend="903"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1acaafab62dd411dc9b79f9fb96e8c8832" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t SI4735::getCurrentStereoBlend</definition>
        <argsstring>()</argsstring>
        <name>getCurrentStereoBlend</name>
        <briefdescription>
<para>Soft Mute Indicator. Indicates soft mute is engaged. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="905" column="20" bodyfile="SI4735.h" bodystart="905" bodyend="905"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a127fa3d2f9b7d57169bbef95703fb4c9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SI4735::getCurrentPilot</definition>
        <argsstring>()</argsstring>
        <name>getCurrentPilot</name>
        <briefdescription>
<para>Indicates amount of stereo blend in % (100 = full stereo, 0 = full mono). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="906" column="17" bodyfile="SI4735.h" bodystart="906" bodyend="906"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a6d521bb5c7ef7811e57c7128cb2106b3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t SI4735::getCurrentMultipath</definition>
        <argsstring>()</argsstring>
        <name>getCurrentMultipath</name>
        <briefdescription>
<para>Indicates stereo pilot presence. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="907" column="20" bodyfile="SI4735.h" bodystart="907" bodyend="907"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a2b3bfeca3b545f5741b1ed70a1dba077" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t SI4735::getCurrentSignedFrequencyOffset</definition>
        <argsstring>()</argsstring>
        <name>getCurrentSignedFrequencyOffset</name>
        <briefdescription>
<para>Contains the current multipath metric. (0 = no multipath; 100 = full multipath) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="908" column="20" bodyfile="SI4735.h" bodystart="908" bodyend="908"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1ad194a5c915620c6a1b8b3d6d7ed645d9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SI4735::getCurrentMultipathDetectLow</definition>
        <argsstring>()</argsstring>
        <name>getCurrentMultipathDetectLow</name>
        <briefdescription>
<para>Signed frequency offset (kHz). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="909" column="17" bodyfile="SI4735.h" bodystart="909" bodyend="909"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a82d0865cf348deb0c9f81a2f12222fb0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SI4735::getCurrentMultipathDetectHigh</definition>
        <argsstring>()</argsstring>
        <name>getCurrentMultipathDetectHigh</name>
        <briefdescription>
<para>Multipath Detect Low. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="910" column="17" bodyfile="SI4735.h" bodystart="910" bodyend="910"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a16107a2f2e51cce5a7e2b1b303425118" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SI4735::getCurrentBlendDetectInterrupt</definition>
        <argsstring>()</argsstring>
        <name>getCurrentBlendDetectInterrupt</name>
        <briefdescription>
<para>Multipath Detect High. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="911" column="17" bodyfile="SI4735.h" bodystart="911" bodyend="911"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1ab26fbd99452daaf18875ff1c3c35d081" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t SI4735::getFirmwarePN</definition>
        <argsstring>()</argsstring>
        <name>getFirmwarePN</name>
        <briefdescription>
<para>Blend Detect Interrupt. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="919" column="20" bodyfile="SI4735.h" bodystart="919" bodyend="919"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1ac2f451cb7320b66d8e08698dcacd50d0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t SI4735::getFirmwareFWMAJOR</definition>
        <argsstring>()</argsstring>
        <name>getFirmwareFWMAJOR</name>
        <briefdescription>
<para>RESP1 - Part Number (HEX) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="920" column="20" bodyfile="SI4735.h" bodystart="920" bodyend="920"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a74b68fcd5718520fc0683977dfc18fc8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t SI4735::getFirmwareFWMINOR</definition>
        <argsstring>()</argsstring>
        <name>getFirmwareFWMINOR</name>
        <briefdescription>
<para>RESP2 - Returns the Firmware Major Revision (ASCII). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="921" column="20" bodyfile="SI4735.h" bodystart="921" bodyend="921"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a58b99a8d5ec2199cb5f2105675aa7a56" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t SI4735::getFirmwarePATCHH</definition>
        <argsstring>()</argsstring>
        <name>getFirmwarePATCHH</name>
        <briefdescription>
<para>RESP3 - Returns the Firmware Minor Revision (ASCII). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="922" column="20" bodyfile="SI4735.h" bodystart="922" bodyend="922"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1ac10b3cd3875985e2c129fea14e2bc47a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t SI4735::getFirmwarePATCHL</definition>
        <argsstring>()</argsstring>
        <name>getFirmwarePATCHL</name>
        <briefdescription>
<para>RESP4 - Returns the Patch ID High byte (HEX). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="923" column="20" bodyfile="SI4735.h" bodystart="923" bodyend="923"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1ab57870d69969e73265e9cffe2a73d868" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t SI4735::getFirmwareCMPMAJOR</definition>
        <argsstring>()</argsstring>
        <name>getFirmwareCMPMAJOR</name>
        <briefdescription>
<para>RESP5 - Returns the Patch ID Low byte (HEX). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="924" column="20" bodyfile="SI4735.h" bodystart="924" bodyend="924"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a883645d266a612ce07d71fdb2cd81e5f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t SI4735::getFirmwareCMPMINOR</definition>
        <argsstring>()</argsstring>
        <name>getFirmwareCMPMINOR</name>
        <briefdescription>
<para>RESP6 - Returns the Component Major Revision (ASCII). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="925" column="20" bodyfile="SI4735.h" bodystart="925" bodyend="925"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1acd363d9111e4a57cf2e1167634bc1b5f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t SI4735::getFirmwareCHIPREV</definition>
        <argsstring>()</argsstring>
        <name>getFirmwareCHIPREV</name>
        <briefdescription>
<para>RESP7 - Returns the Component Minor Revision (ASCII). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="926" column="20" bodyfile="SI4735.h" bodystart="926" bodyend="926"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a3b7543657dfd36da962267bb8692b796" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::setVolume</definition>
        <argsstring>(uint8_t volume)</argsstring>
        <name>setVolume</name>
        <param>
          <type>uint8_t</type>
          <declname>volume</declname>
        </param>
        <briefdescription>
<para>RESP8 - Returns the Chip Revision (ASCII). </para>
        </briefdescription>
        <detaileddescription>
<para>Sets volume level (0 to 63)</para>
<para><simplesect kind="see"><para>Si47XX PROGRAMMING GUIDE; AN332; pages 62, 123, 170, 173 and 204</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uint8_t</parametername>
</parameternamelist>
<parameterdescription>
<para>volume (domain: 0 - 63) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="929" column="10" bodyfile="SI4735.cpp" bodystart="1140" bodyend="1144"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1acf79be50a01fe91abd498e5d42d83317" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t SI4735::getVolume</definition>
        <argsstring>()</argsstring>
        <name>getVolume</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the current volume level.</para>
<para><simplesect kind="see"><para><ref refid="class_s_i4735_1a3b7543657dfd36da962267bb8692b796" kindref="member">setVolume()</ref></para>
</simplesect>
<simplesect kind="return"><para>volume (domain: 0 - 63) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="930" column="13" bodyfile="SI4735.cpp" bodystart="1165" bodyend="1168"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a23d49ab35895b76e0898405fac086c09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::volumeDown</definition>
        <argsstring>()</argsstring>
        <name>volumeDown</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set sound volume level Down <linebreak/>
</para>
<para><simplesect kind="see"><para><ref refid="class_s_i4735_1a3b7543657dfd36da962267bb8692b796" kindref="member">setVolume()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="931" column="10" bodyfile="SI4735.cpp" bodystart="1187" bodyend="1192"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a5e3e8cf04ca99c6be2dbe15d72b4efa3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::volumeUp</definition>
        <argsstring>()</argsstring>
        <name>volumeUp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set sound volume level Up <linebreak/>
</para>
<para><simplesect kind="see"><para><ref refid="class_s_i4735_1a3b7543657dfd36da962267bb8692b796" kindref="member">setVolume()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="932" column="10" bodyfile="SI4735.cpp" bodystart="1175" bodyend="1180"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a430b86ccfd4d6c89da9202a538e0cfc9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t SI4735::getCurrentVolume</definition>
        <argsstring>()</argsstring>
        <name>getCurrentVolume</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="933" column="20" bodyfile="SI4735.h" bodystart="933" bodyend="933"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a12d4e173d096b1568e4209a63534d4f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::setAudioMute</definition>
        <argsstring>(bool off)</argsstring>
        <name>setAudioMute</name>
        <param>
          <type>bool</type>
          <declname>off</declname>
        </param>
        <briefdescription>
<para>Returns the current volume level. </para>
        </briefdescription>
        <detaileddescription>
<para>Sets the audio on or off</para>
<para><simplesect kind="see"><para>See Si47XX PROGRAMMING GUIDE; AN332; pages 62, 123, 171</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>if true, mute the audio; if false unmute the audio. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="934" column="10" bodyfile="SI4735.cpp" bodystart="1153" bodyend="1156"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1aea652d358b4b586b6d5964ceb8eb7c81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::digitalOutputFormat</definition>
        <argsstring>(uint8_t OSIZE, uint8_t OMONO, uint8_t OMODE, uint8_t OFALL)</argsstring>
        <name>digitalOutputFormat</name>
        <param>
          <type>uint8_t</type>
          <declname>OSIZE</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>OMONO</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>OMODE</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>OFALL</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Configures the digital audio output format. Options: DCLK edge, data format, force mono, and sample precision.</para>
<para><simplesect kind="see"><para>Si47XX PROGRAMMING GUIDE; AN332; page 195.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uint8_t</parametername>
</parameternamelist>
<parameterdescription>
<para>OSIZE Digital Output Audio Sample Precision (0=16 bits, 1=20 bits, 2=24 bits, 3=8bits). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>uint8_t</parametername>
</parameternamelist>
<parameterdescription>
<para>OMONO Digital Output Mono Mode (0=Use mono/stereo blend ). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>uint8_t</parametername>
</parameternamelist>
<parameterdescription>
<para>OMODE Digital Output Mode (0=I2S, 6 = Left-justified, 8 = MSB at second DCLK after DFS pulse, 12 = MSB at first DCLK after DFS pulse). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>uint8_t</parametername>
</parameternamelist>
<parameterdescription>
<para>OFALL Digital Output DCLK Edge (0 = use DCLK rising edge, 1 = use DCLK falling edge) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="937" column="10" bodyfile="SI4735.cpp" bodystart="777" bodyend="785"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a1a404ca11fb32b457be2d7cfe484dd03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::digitalOutputSampleRate</definition>
        <argsstring>(uint16_t DOSR)</argsstring>
        <name>digitalOutputSampleRate</name>
        <param>
          <type>uint16_t</type>
          <declname>DOSR</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enables digital audio output and configures digital audio output sample rate in samples per second (sps).</para>
<para><simplesect kind="see"><para>Si47XX PROGRAMMING GUIDE; AN332; page 196.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uint16_t</parametername>
</parameternamelist>
<parameterdescription>
<para>DOSR Digital Output Sample Rate(32–48 ksps .0 to disable digital audio output). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="938" column="10" bodyfile="SI4735.cpp" bodystart="794" bodyend="797"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a753390952a1f2c2a98343979f1f3daa0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::setAM</definition>
        <argsstring>()</argsstring>
        <name>setAM</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the radio to AM function. It means: LW MW and SW.</para>
<para><simplesect kind="see"><para>Si47XX PROGRAMMING GUIDE; AN332; page 129. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="941" column="10" bodyfile="SI4735.cpp" bodystart="458" bodyend="471"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1acd89e7b8adefcbc4e89f802acb915906" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::setFM</definition>
        <argsstring>()</argsstring>
        <name>setFM</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the radio to FM function</para>
<para><simplesect kind="see"><para>Si47XX PROGRAMMING GUIDE; AN332; page 64. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="942" column="10" bodyfile="SI4735.cpp" bodystart="478" bodyend="487"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a43c5ea36995a3897820e0170d94c81f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::setAM</definition>
        <argsstring>(uint16_t fromFreq, uint16_t toFreq, uint16_t intialFreq, uint16_t step)</argsstring>
        <name>setAM</name>
        <param>
          <type>uint16_t</type>
          <declname>fromFreq</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>toFreq</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>intialFreq</declname>
          <defname>initialFreq</defname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>step</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the radio to AM (LW/MW/SW) function.</para>
<para><simplesect kind="see"><para><ref refid="class_s_i4735_1a753390952a1f2c2a98343979f1f3daa0" kindref="member">setAM()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fromFreq</parametername>
</parameternamelist>
<parameterdescription>
<para>minimum frequency for the band </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>toFreq</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum frequency for the band </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initialFreq</parametername>
</parameternamelist>
<parameterdescription>
<para>initial frequency </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>step</parametername>
</parameternamelist>
<parameterdescription>
<para>step used to go to the next channel </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="943" column="10" bodyfile="SI4735.cpp" bodystart="499" bodyend="512"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a673bc4b17d564bb6e7f3e9a61d35fbb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::setFM</definition>
        <argsstring>(uint16_t fromFreq, uint16_t toFreq, uint16_t initialFreq, uint16_t step)</argsstring>
        <name>setFM</name>
        <param>
          <type>uint16_t</type>
          <declname>fromFreq</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>toFreq</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>initialFreq</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>step</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the radio to FM function.</para>
<para><simplesect kind="see"><para><ref refid="class_s_i4735_1acd89e7b8adefcbc4e89f802acb915906" kindref="member">setFM()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fromFreq</parametername>
</parameternamelist>
<parameterdescription>
<para>minimum frequency for the band </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>toFreq</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum frequency for the band </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initialFreq</parametername>
</parameternamelist>
<parameterdescription>
<para>initial frequency (default frequency) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>step</parametername>
</parameternamelist>
<parameterdescription>
<para>step used to go to the next channel <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="944" column="10" bodyfile="SI4735.cpp" bodystart="524" bodyend="538"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a8755743a36d2d4662c8db918d02ee4e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::setBandwidth</definition>
        <argsstring>(uint8_t AMCHFLT, uint8_t AMPLFLT)</argsstring>
        <name>setBandwidth</name>
        <param>
          <type>uint8_t</type>
          <declname>AMCHFLT</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>AMPLFLT</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Selects the bandwidth of the channel filter for AM reception. The choices are 6, 4, 3, 2, 2.5, 1.8, or 1 (kHz). The default bandwidth is 2 kHz. Works only in AM / SSB (LW/MW/SW)</para>
<para><simplesect kind="see"><para>Si47XX PROGRAMMING GUIDE; AN332; pages 125, 151, 277, 181.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>AMCHFLT</parametername>
</parameternamelist>
<parameterdescription>
<para>the choices are: 0 = 6 kHz Bandwidth <linebreak/>
 1 = 4 kHz Bandwidth 2 = 3 kHz Bandwidth 3 = 2 kHz Bandwidth 4 = 1 kHz Bandwidth 5 = 1.8 kHz Bandwidth 6 = 2.5 kHz Bandwidth, gradual roll off 7–15 = Reserved (Do not use). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>AMPLFLT</parametername>
</parameternamelist>
<parameterdescription>
<para>Enables the AM Power Line Noise Rejection Filter. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="946" column="10" bodyfile="SI4735.cpp" bodystart="557" bodyend="584"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a794f6fe7987e146a0135b8e6fabec55c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::setFrequencyStep</definition>
        <argsstring>(uint16_t step)</argsstring>
        <name>setFrequencyStep</name>
        <param>
          <type>uint16_t</type>
          <declname>step</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the current step value.</para>
<para>ATTENTION: This function does not check the limits of the current band. Please, don&apos;t take a step bigger than your legs.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>step</parametername>
</parameternamelist>
<parameterdescription>
<para>if you are using FM, 10 means 100KHz. If you are using AM 10 means 10KHz For AM, 1 (1KHz) to 1000 (1MHz) are valid values. For FM 5 (50KHz) and 10 (100KHz) are valid values. <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="948" column="10" bodyfile="SI4735.cpp" bodystart="417" bodyend="420"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a8c54bfc1fcf1dd989e697cc9b7094f59" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t SI4735::getTuneFrequencyFast</definition>
        <argsstring>()</argsstring>
        <name>getTuneFrequencyFast</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="950" column="20" bodyfile="SI4735.h" bodystart="950" bodyend="950"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a51d816112d974f10306d9d001667395a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::setTuneFrequencyFast</definition>
        <argsstring>(uint8_t FAST)</argsstring>
        <name>setTuneFrequencyFast</name>
        <param>
          <type>uint8_t</type>
          <declname>FAST</declname>
        </param>
        <briefdescription>
<para>Returns the FAST tuning status. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="951" column="17" bodyfile="SI4735.h" bodystart="951" bodyend="951"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a667fead0c7b2658c2b932370ad4e4f88" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t SI4735::getTuneFrequencyFreeze</definition>
        <argsstring>()</argsstring>
        <name>getTuneFrequencyFreeze</name>
        <briefdescription>
<para>FAST Tuning. If set, executes fast and invalidated tune. The tune status will not be accurate. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="952" column="20" bodyfile="SI4735.h" bodystart="952" bodyend="952"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1aee22a5ce06d4948fad2365a7b62fbd8d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::setTuneFrequencyFreeze</definition>
        <argsstring>(uint8_t FREEZE)</argsstring>
        <name>setTuneFrequencyFreeze</name>
        <param>
          <type>uint8_t</type>
          <declname>FREEZE</declname>
        </param>
        <briefdescription>
<para>Returns the FREEZE status. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="953" column="17" bodyfile="SI4735.h" bodystart="953" bodyend="953"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1aaceadaaf0835e3db124d1b36f2aebd3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::setTuneFrequencyAntennaCapacitor</definition>
        <argsstring>(uint16_t capacitor)</argsstring>
        <name>setTuneFrequencyAntennaCapacitor</name>
        <param>
          <type>uint16_t</type>
          <declname>capacitor</declname>
        </param>
        <briefdescription>
<para>Onlye FM. Freeze Metrics During Alternate Frequency Jump. </para>
        </briefdescription>
        <detaileddescription>
<para>Selects the tuning capacitor value.</para>
<para>For FM, Antenna Tuning Capacitor is valid only when using TXO/LPI pin as the antenna input.</para>
<para><simplesect kind="see"><para>Si47XX PROGRAMMING GUIDE; AN332; pages 71 and 136</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>capacitor</parametername>
</parameternamelist>
<parameterdescription>
<para>If zero, the tuning capacitor value is selected automatically. If the value is set to anything other than 0: AM - the tuning capacitance is manually set as 95 fF x ANTCAP + 7 pF. ANTCAP manual range is 1–6143; FM - the valid range is 0 to 191. <linebreak/>
 According to Silicon Labs, automatic capacitor tuning is recommended (value 0). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="954" column="10" bodyfile="SI4735.cpp" bodystart="343" bodyend="365"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1ac0fcfd64dcf30b11d4dc219d9f7fc5d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::frequencyUp</definition>
        <argsstring>()</argsstring>
        <name>frequencyUp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Increments the current frequency on current band/function by using the current step.</para>
<para><simplesect kind="see"><para><ref refid="class_s_i4735_1a794f6fe7987e146a0135b8e6fabec55c" kindref="member">setFrequencyStep()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="956" column="10" bodyfile="SI4735.cpp" bodystart="427" bodyend="435"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a93fff524a6f900ac91eb1222ce73f9ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::frequencyDown</definition>
        <argsstring>()</argsstring>
        <name>frequencyDown</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Decrements the current frequency on current band/function by using the current step.</para>
<para><simplesect kind="see"><para><ref refid="class_s_i4735_1a794f6fe7987e146a0135b8e6fabec55c" kindref="member">setFrequencyStep</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="957" column="10" bodyfile="SI4735.cpp" bodystart="442" bodyend="451"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1ae7ca2ffa6ad68ca69e4f35a3c40bbc3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SI4735::isCurrentTuneFM</definition>
        <argsstring>()</argsstring>
        <name>isCurrentTuneFM</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if the current function is FM (FM_TUNE_FREQ).</para>
<para><simplesect kind="return"><para>true if the current function is FM (FM_TUNE_FREQ). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="958" column="10" bodyfile="SI4735.cpp" bodystart="592" bodyend="595"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a2fbc7e2187a7c645879623100dbc8502" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::getFirmware</definition>
        <argsstring>(void)</argsstring>
        <name>getFirmware</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets firmware information</para>
<para><simplesect kind="see"><para>Si47XX PROGRAMMING GUIDE; AN332; pages 66, 131 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="959" column="10" bodyfile="SI4735.cpp" bodystart="250" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a39f0e95a5efe5bd9add926c6f538528a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::setFunction</definition>
        <argsstring>(uint8_t FUNC)</argsstring>
        <name>setFunction</name>
        <param>
          <type>uint8_t</type>
          <declname>FUNC</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="961" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a3280b98b8331f00b4d0158ef1b076533" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::seekStation</definition>
        <argsstring>(uint8_t SEEKUP, uint8_t WRAP)</argsstring>
        <name>seekStation</name>
        <param>
          <type>uint8_t</type>
          <declname>SEEKUP</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>WRAP</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Look for a station</para>
<para><simplesect kind="see"><para>Si47XX PROGRAMMING GUIDE; AN332; pages 55, 72, 125 and 137</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>SEEKUP</parametername>
</parameternamelist>
<parameterdescription>
<para>Seek Up/Down. Determines the direction of the search, either UP = 1, or DOWN = 0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Wrap/Halt.</parametername>
</parameternamelist>
<parameterdescription>
<para>Determines whether the seek should Wrap = 1, or Halt = 0 when it hits the band limit. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="962" column="10" bodyfile="SI4735.cpp" bodystart="1033" bodyend="1059"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1aad5211e3fff28141473442f59008e415" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::seekStationUp</definition>
        <argsstring>()</argsstring>
        <name>seekStationUp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Search for the next station</para>
<para><simplesect kind="see"><para><ref refid="class_s_i4735_1a3280b98b8331f00b4d0158ef1b076533" kindref="member">seekStation(uint8_t SEEKUP, uint8_t WRAP)</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="963" column="10" bodyfile="SI4735.cpp" bodystart="1066" bodyend="1071"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a1eeaa09670cdbdc7ddd724c940d2506b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::seekStationDown</definition>
        <argsstring>()</argsstring>
        <name>seekStationDown</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Search the previous station</para>
<para><simplesect kind="see"><para><ref refid="class_s_i4735_1a3280b98b8331f00b4d0158ef1b076533" kindref="member">seekStation(uint8_t SEEKUP, uint8_t WRAP)</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="964" column="10" bodyfile="SI4735.cpp" bodystart="1078" bodyend="1083"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a6b901d5cd729364dbda6e5b811dc9ec2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::setSeekAmLimits</definition>
        <argsstring>(uint16_t bottom, uint16_t top)</argsstring>
        <name>setSeekAmLimits</name>
        <param>
          <type>uint16_t</type>
          <declname>bottom</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>top</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the bottom frequency and top frequency of the AM band for seek. Default is 520 to 1710.</para>
<para><simplesect kind="see"><para>Si47XX PROGRAMMING GUIDE; AN332; pages 127, 161, and 162</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uint16_t</parametername>
</parameternamelist>
<parameterdescription>
<para>bottom - the bottom of the AM band for seek </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>uint16_t</parametername>
</parameternamelist>
<parameterdescription>
<para>top - the top of the AM band for seek </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="965" column="10" bodyfile="SI4735.cpp" bodystart="1093" bodyend="1097"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a6f8218c0bbdcb75ea54bc8af2a60dcc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::setSeekAmSpacing</definition>
        <argsstring>(uint16_t spacing)</argsstring>
        <name>setSeekAmSpacing</name>
        <param>
          <type>uint16_t</type>
          <declname>spacing</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Selects frequency spacingfor AM seek. Default is 10 kHz spacing.</para>
<para><simplesect kind="see"><para>Si47XX PROGRAMMING GUIDE; AN332; pages 163, 229 and 283</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uint16_t</parametername>
</parameternamelist>
<parameterdescription>
<para>spacing - step in KHz </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="966" column="10" bodyfile="SI4735.cpp" bodystart="1106" bodyend="1109"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1aeef76371500acdbdc17ca8dc980e1fff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::setSeekSrnThreshold</definition>
        <argsstring>(uint16_t value)</argsstring>
        <name>setSeekSrnThreshold</name>
        <param>
          <type>uint16_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the SNR threshold for a valid AM Seek/Tune. If the value is zero then SNR threshold is not considered when doing a seek. Default value is 5 dB.</para>
<para><simplesect kind="see"><para>Si47XX PROGRAMMING GUIDE; AN332; page 127 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="967" column="10" bodyfile="SI4735.cpp" bodystart="1117" bodyend="1120"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a13397b273f7ab6fa7d5f48f116edac9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::setSeekRssiThreshold</definition>
        <argsstring>(uint16_t value)</argsstring>
        <name>setSeekRssiThreshold</name>
        <param>
          <type>uint16_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the RSSI threshold for a valid AM Seek/Tune. If the value is zero then RSSI threshold is not considered when doing a seek. Default value is 25 dBμV.</para>
<para><simplesect kind="see"><para>Si47XX PROGRAMMING GUIDE; AN332; page 127 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="968" column="10" bodyfile="SI4735.cpp" bodystart="1128" bodyend="1131"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1ac598865516ca09db7dbfa6a84da7f179" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::setFmBlendStereoThreshold</definition>
        <argsstring>(uint8_t parameter)</argsstring>
        <name>setFmBlendStereoThreshold</name>
        <param>
          <type>uint8_t</type>
          <declname>parameter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets RSSI threshold for stereo blend (Full stereo above threshold, blend below threshold). To force stereo, set this to 0. To force mono, set this to 127.</para>
<para><simplesect kind="see"><para>Si47XX PROGRAMMING GUIDE; AN332; page 90.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>parameter</parametername>
</parameternamelist>
<parameterdescription>
<para>valid values: 0 to 127 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="970" column="10" bodyfile="SI4735.cpp" bodystart="631" bodyend="634"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1adf4c5ec4473fd8486dd2ec7a19a10d24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::setFmBlendMonoThreshold</definition>
        <argsstring>(uint8_t parameter)</argsstring>
        <name>setFmBlendMonoThreshold</name>
        <param>
          <type>uint8_t</type>
          <declname>parameter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets RSSI threshold for mono blend (Full mono below threshold, blend above threshold). To force stereo set this to 0. To force mono set this to 127. Default value is 30 dBμV.</para>
<para><simplesect kind="see"><para>Si47XX PROGRAMMING GUIDE; AN332; page 56.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>parameter</parametername>
</parameternamelist>
<parameterdescription>
<para>valid values: 0 to 127 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="971" column="10" bodyfile="SI4735.cpp" bodystart="644" bodyend="647"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1ab063630466dccea3becc11d60d122904" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::setFmBlendRssiStereoThreshold</definition>
        <argsstring>(uint8_t parameter)</argsstring>
        <name>setFmBlendRssiStereoThreshold</name>
        <param>
          <type>uint8_t</type>
          <declname>parameter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets RSSI threshold for stereo blend. (Full stereo above threshold, blend below threshold.) To force stereo, set this to 0. To force mono, set this to 127. Default value is 49 dBμV. <simplesect kind="see"><para>Si47XX PROGRAMMING GUIDE; AN332; page 59.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>parameter</parametername>
</parameternamelist>
<parameterdescription>
<para>valid values: 0 to 127 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="972" column="10" bodyfile="SI4735.cpp" bodystart="656" bodyend="659"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a1b134a94138b3bf993a5d3eb5f8ed5c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::setFmBLendRssiMonoThreshold</definition>
        <argsstring>(uint8_t parameter)</argsstring>
        <name>setFmBLendRssiMonoThreshold</name>
        <param>
          <type>uint8_t</type>
          <declname>parameter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets RSSI threshold for mono blend (Full mono below threshold, blend above threshold). To force stereo, set this to 0. To force mono, set this to 127. Default value is 30 dBμV.</para>
<para><simplesect kind="see"><para>Si47XX PROGRAMMING GUIDE; AN332; page 59. <linebreak/>
</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>parameter</parametername>
</parameternamelist>
<parameterdescription>
<para>valid values: 0 to 127 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="973" column="10" bodyfile="SI4735.cpp" bodystart="669" bodyend="672"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a1d1a5eed976370d99827ba55d08b9293" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::setFmBlendSnrStereoThreshold</definition>
        <argsstring>(uint8_t parameter)</argsstring>
        <name>setFmBlendSnrStereoThreshold</name>
        <param>
          <type>uint8_t</type>
          <declname>parameter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets SNR threshold for stereo blend (Full stereo above threshold, blend below threshold). To force stereo, set this to 0. To force mono, set this to 127. Default value is 27 dB.</para>
<para><simplesect kind="see"><para>Si47XX PROGRAMMING GUIDE; AN332; page 59. <linebreak/>
</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>parameter</parametername>
</parameternamelist>
<parameterdescription>
<para>valid values: 0 to 127 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="974" column="10" bodyfile="SI4735.cpp" bodystart="682" bodyend="685"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1ae2c30536e59f6691d990a2b9cf21f07e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::setFmBLendSnrMonoThreshold</definition>
        <argsstring>(uint8_t parameter)</argsstring>
        <name>setFmBLendSnrMonoThreshold</name>
        <param>
          <type>uint8_t</type>
          <declname>parameter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets SNR threshold for mono blend (Full mono below threshold, blend above threshold). To force stereo, set this to 0. To force mono, set this to 127. Default value is 14 dB.</para>
<para><simplesect kind="see"><para>Si47XX PROGRAMMING GUIDE; AN332; page 59.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>parameter</parametername>
</parameternamelist>
<parameterdescription>
<para>valid values: 0 to 127 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="975" column="10" bodyfile="SI4735.cpp" bodystart="695" bodyend="698"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a0ed776a193fb2fcff783d4a82ff714e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::setFmBlendMultiPathStereoThreshold</definition>
        <argsstring>(uint8_t parameter)</argsstring>
        <name>setFmBlendMultiPathStereoThreshold</name>
        <param>
          <type>uint8_t</type>
          <declname>parameter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets multipath threshold for stereo blend (Full stereo below threshold, blend above threshold). To force stereo, set this to 100. To force mono, set this to 0. Default value is 20.</para>
<para><simplesect kind="see"><para>Si47XX PROGRAMMING GUIDE; AN332; page 60.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>parameter</parametername>
</parameternamelist>
<parameterdescription>
<para>valid values: 0 to 100 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="976" column="10" bodyfile="SI4735.cpp" bodystart="708" bodyend="711"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1acc9fd27b38f49f167facfcc4f6216c5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::setFmBlendMultiPathMonoThreshold</definition>
        <argsstring>(uint8_t parameter)</argsstring>
        <name>setFmBlendMultiPathMonoThreshold</name>
        <param>
          <type>uint8_t</type>
          <declname>parameter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets Multipath threshold for mono blend (Full mono above threshold, blend below threshold). To force stereo, set to 100. To force mono, set to 0. The default is 60.</para>
<para><simplesect kind="see"><para>Si47XX PROGRAMMING GUIDE; AN332; page 60.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>parameter</parametername>
</parameternamelist>
<parameterdescription>
<para>valid values: 0 to 100 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="977" column="10" bodyfile="SI4735.cpp" bodystart="721" bodyend="724"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a52c7b7b1f0ed9121b0e64516b2bd2a55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::setFmStereoOn</definition>
        <argsstring>()</argsstring>
        <name>setFmStereoOn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Turn Off Stereo operation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="978" column="10" bodyfile="SI4735.cpp" bodystart="737" bodyend="740"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a59ce1008944ff9a51b6c5baeb3a3e2cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::setFmStereoOff</definition>
        <argsstring>()</argsstring>
        <name>setFmStereoOff</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Turn Off Stereo operation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="979" column="10" bodyfile="SI4735.cpp" bodystart="729" bodyend="732"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1affdba9ca9fb9bf5bb671ac3d448a7e89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::RdsInit</definition>
        <argsstring>()</argsstring>
        <name>RdsInit</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Starts the control variables for RDS. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="982" column="10" bodyfile="SI4735.cpp" bodystart="1201" bodyend="1207"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a530e64d00d95b4ceb13ce33aa74c63cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::setRdsIntSource</definition>
        <argsstring>(uint8_t RDSNEWBLOCKB, uint8_t RDSNEWBLOCKA, uint8_t RDSSYNCFOUND, uint8_t RDSSYNCLOST, uint8_t RDSRECV)</argsstring>
        <name>setRdsIntSource</name>
        <param>
          <type>uint8_t</type>
          <declname>RDSNEWBLOCKB</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>RDSNEWBLOCKA</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>RDSSYNCFOUND</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>RDSSYNCLOST</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>RDSRECV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Configures interrupt related to RDS</para>
<para>Use this method if want to use interrupt</para>
<para><simplesect kind="see"><para>Si47XX PROGRAMMING GUIDE; AN332; page 103</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>RDSRECV</parametername>
</parameternamelist>
<parameterdescription>
<para>If set, generate RDSINT when RDS FIFO has at least FM_RDS_INT_FIFO_COUNT entries. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>RDSSYNCLOST</parametername>
</parameternamelist>
<parameterdescription>
<para>If set, generate RDSINT when RDS loses synchronization. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>RDSSYNCFOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>set, generate RDSINT when RDS gains synchronization. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>RDSNEWBLOCKA</parametername>
</parameternamelist>
<parameterdescription>
<para>If set, generate an interrupt when Block A data is found or subsequently changed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>RDSNEWBLOCKB</parametername>
</parameternamelist>
<parameterdescription>
<para>If set, generate an interrupt when Block B data is found or subsequently changed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="983" column="10" bodyfile="SI4735.cpp" bodystart="1309" bodyend="1338"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a350a2033671a7620d4b9290a2347e185" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::getRdsStatus</definition>
        <argsstring>(uint8_t INTACK, uint8_t MTFIFO, uint8_t STATUSONLY)</argsstring>
        <name>getRdsStatus</name>
        <param>
          <type>uint8_t</type>
          <declname>INTACK</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>MTFIFO</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>STATUSONLY</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the RDS status. Store the status in currentRdsStatus member. RDS COMMAND FM_RDS_STATUS</para>
<para><simplesect kind="see"><para>Si47XX PROGRAMMING GUIDE; AN332; pages 55 and 77</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>INTACK</parametername>
</parameternamelist>
<parameterdescription>
<para>Interrupt Acknowledge; 0 = RDSINT status preserved. 1 = Clears RDSINT. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>MTFIFO</parametername>
</parameternamelist>
<parameterdescription>
<para>0 = If FIFO not empty, read and remove oldest FIFO entry; 1 = Clear RDS Receive FIFO. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>STATUSONLY</parametername>
</parameternamelist>
<parameterdescription>
<para>Determines if data should be removed from the RDS FIFO. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="984" column="10" bodyfile="SI4735.cpp" bodystart="1350" bodyend="1386"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a94cce3834f85fc127e8c2dab3a03e875" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::getRdsStatus</definition>
        <argsstring>()</argsstring>
        <name>getRdsStatus</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets RDS Status. Same result of calling getRdsStatus(0,0,0);</para>
<para><simplesect kind="see"><para><ref refid="class_s_i4735_1a350a2033671a7620d4b9290a2347e185" kindref="member">SI4735::getRdsStatus(uint8_t INTACK, uint8_t MTFIFO, uint8_t STATUSONLY)</ref></para>
</simplesect>
Please, call <ref refid="class_s_i4735_1a350a2033671a7620d4b9290a2347e185" kindref="member">getRdsStatus(uint8_t INTACK, uint8_t MTFIFO, uint8_t STATUSONLY)</ref> instead <ref refid="class_s_i4735_1a94cce3834f85fc127e8c2dab3a03e875" kindref="member">getRdsStatus()</ref> if you want other behaviour </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="985" column="10" bodyfile="SI4735.cpp" bodystart="1397" bodyend="1400"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a6e8405ea5846fab586080a7be696178e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SI4735::getRdsReceived</definition>
        <argsstring>()</argsstring>
        <name>getRdsReceived</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="986" column="17" bodyfile="SI4735.h" bodystart="986" bodyend="986"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1ac283a8a89cc885c2740c65a7128ff7ef" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SI4735::getRdsSyncLost</definition>
        <argsstring>()</argsstring>
        <name>getRdsSyncLost</name>
        <briefdescription>
<para>1 = FIFO filled to minimum number of groups </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="987" column="17" bodyfile="SI4735.h" bodystart="987" bodyend="987"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a78e906f12771490771c624be1777784d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SI4735::getRdsSyncFound</definition>
        <argsstring>()</argsstring>
        <name>getRdsSyncFound</name>
        <briefdescription>
<para>1 = Lost RDS synchronization </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="988" column="17" bodyfile="SI4735.h" bodystart="988" bodyend="988"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a561a052a8c737302368274c774d8c129" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SI4735::getRdsNewBlockA</definition>
        <argsstring>()</argsstring>
        <name>getRdsNewBlockA</name>
        <briefdescription>
<para>1 = Found RDS synchronization </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="989" column="17" bodyfile="SI4735.h" bodystart="989" bodyend="989"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1aff740d85cc04c257f53c7e910bd45fcf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SI4735::getRdsNewBlockB</definition>
        <argsstring>()</argsstring>
        <name>getRdsNewBlockB</name>
        <briefdescription>
<para>1 = Valid Block A data has been received. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="990" column="17" bodyfile="SI4735.h" bodystart="990" bodyend="990"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a6e899b37cbc3dcd0ab969724e4008f0f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SI4735::getRdsSync</definition>
        <argsstring>()</argsstring>
        <name>getRdsSync</name>
        <briefdescription>
<para>1 = Valid Block B data has been received. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="991" column="17" bodyfile="SI4735.h" bodystart="991" bodyend="991"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a8db437efc42a81466d8daf4dcc35c50c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SI4735::getGroupLost</definition>
        <argsstring>()</argsstring>
        <name>getGroupLost</name>
        <briefdescription>
<para>1 = RDS currently synchronized. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="992" column="17" bodyfile="SI4735.h" bodystart="992" bodyend="992"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a819c370ff03c52a527fbc85f9877f526" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t SI4735::getNumRdsFifoUsed</definition>
        <argsstring>()</argsstring>
        <name>getNumRdsFifoUsed</name>
        <briefdescription>
<para>1 = One or more RDS groups discarded due to FIFO overrun. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="993" column="20" bodyfile="SI4735.h" bodystart="993" bodyend="993"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1ad9718a85c79a311c26997bbda20f2351" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::setRdsConfig</definition>
        <argsstring>(uint8_t RDSEN, uint8_t BLETHA, uint8_t BLETHB, uint8_t BLETHC, uint8_t BLETHD)</argsstring>
        <name>setRdsConfig</name>
        <param>
          <type>uint8_t</type>
          <declname>RDSEN</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>BLETHA</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>BLETHB</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>BLETHC</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>BLETHD</declname>
        </param>
        <briefdescription>
<para>RESP3 - RDS FIFO Used; Number of groups remaining in the RDS FIFO (0 if empty). </para>
        </briefdescription>
        <detaileddescription>
<para>Sets RDS property (FM_RDS_CONFIG) Configures RDS settings to enable RDS processing (RDSEN) and set RDS block error thresholds. When a RDS Group is received, all block errors must be less than or equal the associated block error threshold for the group to be stored in the RDS FIFO.</para>
<para><simplesect kind="see"><para>Si47XX PROGRAMMING GUIDE; AN332; page 104</para>
</simplesect>
MPORTANT: All block errors must be less than or equal the associated block error threshold for the group to be stored in the RDS FIFO. 0 = No errors. 1 = 1–2 bit errors detected and corrected. 2 = 3–5 bit errors detected and corrected. 3 = Uncorrectable. Recommended Block Error Threshold options: 2,2,2,2 = No group stored if any errors are uncorrected. 3,3,3,3 = Group stored regardless of errors. 0,0,0,0 = No group stored containing corrected or uncorrected errors. 3,2,3,3 = Group stored with corrected errors on B, regardless of errors on A, C, or D.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uint8_t</parametername>
</parameternamelist>
<parameterdescription>
<para>RDSEN RDS Processing Enable; 1 = RDS processing enabled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>uint8_t</parametername>
</parameternamelist>
<parameterdescription>
<para>BLETHA Block Error Threshold BLOCKA. <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>uint8_t</parametername>
</parameternamelist>
<parameterdescription>
<para>BLETHB Block Error Threshold BLOCKB. <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>uint8_t</parametername>
</parameternamelist>
<parameterdescription>
<para>BLETHC Block Error Threshold BLOCKC. <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>uint8_t</parametername>
</parameternamelist>
<parameterdescription>
<para>BLETHD Block Error Threshold BLOCKD. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="995" column="10" bodyfile="SI4735.cpp" bodystart="1265" bodyend="1294"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1af1e67b201799a9e8d7208a32a65656b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t SI4735::getRdsPI</definition>
        <argsstring>(void)</argsstring>
        <name>getRdsPI</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the programa type. Read the Block A content</para>
<para><simplesect kind="see"><para>Si47XX PROGRAMMING GUIDE; AN332; pages 77 and 78</para>
</simplesect>
<simplesect kind="return"><para>BLOCKAL </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="996" column="14" bodyfile="SI4735.cpp" bodystart="1412" bodyend="1419"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1aa35366e5cded7b864f7268a7e4a8dbe9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t SI4735::getRdsGroupType</definition>
        <argsstring>(void)</argsstring>
        <name>getRdsGroupType</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the Group Type (extracted from the Block B) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="997" column="13" bodyfile="SI4735.cpp" bodystart="1424" bodyend="1432"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a05f76a0a0ebda813483f1df24e890904" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t SI4735::getRdsFlagAB</definition>
        <argsstring>(void)</argsstring>
        <name>getRdsFlagAB</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the current Text Flag A/B <linebreak/>
</para>
<para><simplesect kind="return"><para>uint8_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="998" column="13" bodyfile="SI4735.cpp" bodystart="1440" bodyend="1448"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1af9b6cb614d1b01b11bb23c19e6deb8b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t SI4735::getRdsVersionCode</definition>
        <argsstring>(void)</argsstring>
        <name>getRdsVersionCode</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the version code (extracted from the Block B)</para>
<para><simplesect kind="return"><para>0=A or 1=B </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="999" column="13" bodyfile="SI4735.cpp" bodystart="1474" bodyend="1482"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1ac28fa3818d4f900c4f4ba6be10c1405b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t SI4735::getRdsProgramType</definition>
        <argsstring>(void)</argsstring>
        <name>getRdsProgramType</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the Program Type (extracted from the Block B)</para>
<para><simplesect kind="see"><para><ulink url="https://en.wikipedia.org/wiki/Radio_Data_System">https://en.wikipedia.org/wiki/Radio_Data_System</ulink></para>
</simplesect>
<simplesect kind="return"><para>program type (an integer betwenn 0 and 31) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="1000" column="13" bodyfile="SI4735.cpp" bodystart="1491" bodyend="1499"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1ab1ed04a109330e7e9206483c7cdf5ef9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t SI4735::getRdsTextSegmentAddress</definition>
        <argsstring>(void)</argsstring>
        <name>getRdsTextSegmentAddress</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the address of the text segment. 2A - Each text segment in version 2A groups consists of four characters. A messages of this group can be have up to 64 characters. 2B - In version 2B groups, each text segment consists of only two characters. When the current RDS status is using this version, the maximum message length will be 32 characters.</para>
<para><simplesect kind="return"><para>uint8_t the address of the text segment. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="1001" column="13" bodyfile="SI4735.cpp" bodystart="1460" bodyend="1467"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a71cbaa3e0c103db7cee5969d162bec5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * SI4735::getRdsText</definition>
        <argsstring>(void)</argsstring>
        <name>getRdsText</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the RDS Text when the message is of the Group Type 2 version A</para>
<para><simplesect kind="return"><para>char* The string (char array) with the content (Text) received from group 2A </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="1003" column="10" bodyfile="SI4735.cpp" bodystart="1572" bodyend="1586"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a12d917629b78fffebac5ecf8f2936921" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * SI4735::getRdsText0A</definition>
        <argsstring>(void)</argsstring>
        <name>getRdsText0A</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the station name and other messages.</para>
<para><simplesect kind="return"><para>char* should return a string with the station name. However, some stations send other kind of messages </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="1004" column="10" bodyfile="SI4735.cpp" bodystart="1594" bodyend="1618"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1ae54d0f5562ca7615c3b90bee00c29ab4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * SI4735::getRdsText2A</definition>
        <argsstring>(void)</argsstring>
        <name>getRdsText2A</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the Text processed for the 2A group</para>
<para><simplesect kind="return"><para>char* string with the Text of the group A2 <linebreak/>
 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="1005" column="10" bodyfile="SI4735.cpp" bodystart="1625" bodyend="1649"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a806d5cfbbeb6ca1299ce20b1220fdb18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * SI4735::getRdsText2B</definition>
        <argsstring>(void)</argsstring>
        <name>getRdsText2B</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the Text processed for the 2B group</para>
<para><simplesect kind="return"><para>char* string with the Text of the group AB <linebreak/>
 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="1006" column="10" bodyfile="SI4735.cpp" bodystart="1657" bodyend="1681"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1aa8436bb156f3ac8321c65941be42fdba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * SI4735::getRdsTime</definition>
        <argsstring>(void)</argsstring>
        <name>getRdsTime</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the RDS time and date when the Group type is 4</para>
<para><simplesect kind="return"><para>char* a string with hh:mm +/- offset </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="1008" column="10" bodyfile="SI4735.cpp" bodystart="1688" bodyend="1728"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1ab1f4f137139b40fe386ca51586999e50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::getNext2Block</definition>
        <argsstring>(char *)</argsstring>
        <name>getNext2Block</name>
        <param>
          <type>char *</type>
          <defname>c</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Process data received from group 2B</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>char array reference to the &quot;group 2B&quot; text </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="1011" column="10" bodyfile="SI4735.cpp" bodystart="1506" bodyend="1531"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1adb0a3c39aeacba0faf39aadd9465021f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::getNext4Block</definition>
        <argsstring>(char *)</argsstring>
        <name>getNext4Block</name>
        <param>
          <type>char *</type>
          <defname>c</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Process data received from group 2A</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>char array reference to the &quot;group  2A&quot; text </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="1012" column="10" bodyfile="SI4735.cpp" bodystart="1538" bodyend="1564"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a6f045d3725a457116236ee92d41c4265" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::ssbSetup</definition>
        <argsstring>()</argsstring>
        <name>ssbSetup</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Starts the Si473X device on SSB (same AM Mode). Same <ref refid="class_s_i4735_1a944ed704e2175a6cf660ad65ca5bbad5" kindref="member">SI4735::setup</ref> optimized to improve loading patch performance </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="1017" column="10" bodyfile="SI4735.cpp" bodystart="2104" bodyend="2109"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a55cf9a091d314a1aa21552f2254f756f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::setSSBBfo</definition>
        <argsstring>(int offset)</argsstring>
        <name>setSSBBfo</name>
        <param>
          <type>int</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the SSB Beat Frequency Offset (BFO).</para>
<para><simplesect kind="see"><para>AN332 REV 0.8 UNIVERSAL PROGRAMMING GUIDE; pages 5 and 23</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>16-bit signed value (unit in Hz). The valid range is -16383 to +16383 Hz. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="1018" column="10" bodyfile="SI4735.cpp" bodystart="1790" bodyend="1814"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a9224e7d4ef14c887da96dbefd2dcefd3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::setSSBConfig</definition>
        <argsstring>(uint8_t AUDIOBW, uint8_t SBCUTFLT, uint8_t AVC_DIVIDER, uint8_t AVCEN, uint8_t SMUTESEL, uint8_t DSP_AFCDIS)</argsstring>
        <name>setSSBConfig</name>
        <param>
          <type>uint8_t</type>
          <declname>AUDIOBW</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>SBCUTFLT</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>AVC_DIVIDER</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>AVCEN</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>SMUTESEL</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>DSP_AFCDIS</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the SSB receiver mode details: 1) Enable or disable AFC track to carrier function for receiving normal AM signals; 2) Set the audio bandwidth; 3) Set the side band cutoff filter; 4) Set soft-mute based on RSSI or SNR; 5) Enable or disbable automatic volume control (AVC) function.</para>
<para><simplesect kind="see"><para>AN332 REV 0.8 UNIVERSAL PROGRAMMING GUIDE; page 24</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>AUDIOBW</parametername>
</parameternamelist>
<parameterdescription>
<para>SSB Audio bandwidth; 0 = 1.2KHz (default); 1=2.2KHz; 2=3KHz; 3=4KHz; 4=500Hz; 5=1KHz. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SBCUTFLT</parametername>
</parameternamelist>
<parameterdescription>
<para>SSB side band cutoff filter for band passand low pass filter if 0, the band pass filter to cutoff both the unwanted side band and high frequency component &gt; 2KHz of the wanted side band (default). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>AVC_DIVIDER</parametername>
</parameternamelist>
<parameterdescription>
<para>set 0 for SSB mode; set 3 for SYNC mode. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>AVCEN</parametername>
</parameternamelist>
<parameterdescription>
<para>SSB Automatic Volume Control (AVC) enable; 0=disable; 1=enable (default). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SMUTESEL</parametername>
</parameternamelist>
<parameterdescription>
<para>SSB Soft-mute Based on RSSI or SNR. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>DSP_AFCDIS</parametername>
</parameternamelist>
<parameterdescription>
<para>DSP AFC Disable or enable; 0=SYNC MODE, AFC enable; 1=SSB MODE, AFC disable. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="1019" column="10" bodyfile="SI4735.cpp" bodystart="1835" bodyend="1849"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a7c48f2af416b1f89dbedbfbe9a637620" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::setSSB</definition>
        <argsstring>(uint16_t fromFreq, uint16_t toFreq, uint16_t intialFreq, uint16_t step, uint8_t usblsb)</argsstring>
        <name>setSSB</name>
        <param>
          <type>uint16_t</type>
          <declname>fromFreq</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>toFreq</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>intialFreq</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>step</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>usblsb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="1020" column="10" bodyfile="SI4735.cpp" bodystart="1986" bodyend="2000"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a3e907ddf560a0c8286fa55768701b3da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::setSSB</definition>
        <argsstring>(uint8_t usblsb)</argsstring>
        <name>setSSB</name>
        <param>
          <type>uint8_t</type>
          <declname>usblsb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the radio to AM function. It means: LW MW and SW.</para>
<para><simplesect kind="see"><para>AN332 REV 0.8 UNIVERSAL PROGRAMMING GUIDE; pages 13 and 14 </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_s_i4735_1a753390952a1f2c2a98343979f1f3daa0" kindref="member">setAM()</ref> </para>
</simplesect>
<simplesect kind="see"><para>void <ref refid="class_s_i4735_1a63d205f2d3169ba877a2bd2ee28d224f" kindref="member">SI4735::setFrequency(uint16_t freq)</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>usblsb</parametername>
</parameternamelist>
<parameterdescription>
<para>upper or lower side band; 1 = LSB; 2 = USB </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="1021" column="10" bodyfile="SI4735.cpp" bodystart="1960" bodyend="1971"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a6b2ad4d027463262350134490d16bf32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::setSSBAudioBandwidth</definition>
        <argsstring>(uint8_t AUDIOBW)</argsstring>
        <name>setSSBAudioBandwidth</name>
        <param>
          <type>uint8_t</type>
          <declname>AUDIOBW</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>SSB Audio Bandwidth for SSB mode</para>
<para>0 = 1.2 kHz low-pass filter* . (default) 1 = 2.2 kHz low-pass filter* . 2 = 3.0 kHz low-pass filter. 3 = 4.0 kHz low-pass filter. 4 = 500 Hz band-pass filter for receiving CW signal, i.e. [250 Hz, 750 Hz] with center frequency at 500 Hz when USB is selected or [-250 Hz, -750 1Hz] with center frequency at -500Hz when LSB is selected* . 5 = 1 kHz band-pass filter for receiving CW signal, i.e. [500 Hz, 1500 Hz] with center frequency at 1 kHz when USB is selected or [-500 Hz, -1500 1 Hz] with center frequency at -1kHz when LSB is selected* . Other values = reserved. Note: If audio bandwidth selected is about 2 kHz or below, it is recommended to set SBCUTFLT[3:0] to 0 to enable the band pass filter for better high- cut performance on the wanted side band. Otherwise, set it to 1.</para>
<para><simplesect kind="see"><para>AN332 REV 0.8 UNIVERSAL PROGRAMMING GUIDE; page 24</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>AUDIOBW</parametername>
</parameternamelist>
<parameterdescription>
<para>the valid values are 0, 1, 2, 3, 4 or 5; see description above </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="1022" column="10" bodyfile="SI4735.cpp" bodystart="1943" bodyend="1948"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1acacf1dac4c0ec170d1da629dd1fd30cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::setSSBAutomaticVolumeControl</definition>
        <argsstring>(uint8_t AVCEN)</argsstring>
        <name>setSSBAutomaticVolumeControl</name>
        <param>
          <type>uint8_t</type>
          <declname>AVCEN</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets SSB Automatic Volume Control (AVC) for SSB mode</para>
<para><simplesect kind="see"><para>AN332 REV 0.8 UNIVERSAL PROGRAMMING GUIDE; page 24</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>AVCEN</parametername>
</parameternamelist>
<parameterdescription>
<para>0 = Disable AVC; 1 = Enable AVC (default). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="1023" column="10" bodyfile="SI4735.cpp" bodystart="1885" bodyend="1889"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1ae9d50b24642784943fefedbac944a8e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::setSBBSidebandCutoffFilter</definition>
        <argsstring>(uint8_t SBCUTFLT)</argsstring>
        <name>setSBBSidebandCutoffFilter</name>
        <param>
          <type>uint8_t</type>
          <declname>SBCUTFLT</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets SBB Sideband Cutoff Filter for band pass and low pass filters: 0 = Band pass filter to cutoff both the unwanted side band and high frequency components &gt; 2.0 kHz of the wanted side band. (default) 1 = Low pass filter to cutoff the unwanted side band. Other values = not allowed.</para>
<para><simplesect kind="see"><para>AN332 REV 0.8 UNIVERSAL PROGRAMMING GUIDE; page 24</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>SBCUTFLT</parametername>
</parameternamelist>
<parameterdescription>
<para>0 or 1; see above </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="1024" column="10" bodyfile="SI4735.cpp" bodystart="1914" bodyend="1918"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1afc5e87c50a1eba6de9504c114cc1cb70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::setSSBAvcDivider</definition>
        <argsstring>(uint8_t AVC_DIVIDER)</argsstring>
        <name>setSSBAvcDivider</name>
        <param>
          <type>uint8_t</type>
          <declname>AVC_DIVIDER</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets AVC Divider</para>
<para><simplesect kind="see"><para>AN332 REV 0.8 UNIVERSAL PROGRAMMING GUIDE; page 24 <linebreak/>
</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>AVC_DIVIDER</parametername>
</parameternamelist>
<parameterdescription>
<para>SSB mode, set divider = 0; SYNC mode, set divider = 3; Other values = not allowed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="1025" column="10" bodyfile="SI4735.cpp" bodystart="1898" bodyend="1902"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a6cde26a5abf759a628012d1457d85c72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::setSSBDspAfc</definition>
        <argsstring>(uint8_t DSP_AFCDIS)</argsstring>
        <name>setSSBDspAfc</name>
        <param>
          <type>uint8_t</type>
          <declname>DSP_AFCDIS</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets DSP AFC disable or enable</para>
<para><simplesect kind="see"><para>AN332 REV 0.8 UNIVERSAL PROGRAMMING GUIDE; page 24</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>DSP_AFCDIS</parametername>
</parameternamelist>
<parameterdescription>
<para>0 = SYNC mode, AFC enable; 1 = SSB mode, AFC disable </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="1026" column="10" bodyfile="SI4735.cpp" bodystart="1858" bodyend="1862"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a91251dfc2ff9488aaef3aa1a528097d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::setSSBSoftMute</definition>
        <argsstring>(uint8_t SMUTESEL)</argsstring>
        <name>setSSBSoftMute</name>
        <param>
          <type>uint8_t</type>
          <declname>SMUTESEL</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets SSB Soft-mute Based on RSSI or SNR Selection:</para>
<para><simplesect kind="see"><para>AN332 REV 0.8 UNIVERSAL PROGRAMMING GUIDE; page 24</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>SMUTESEL</parametername>
</parameternamelist>
<parameterdescription>
<para>0 = Soft-mute based on RSSI (default); 1 = Soft-mute based on SNR. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="1027" column="10" bodyfile="SI4735.cpp" bodystart="1872" bodyend="1876"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1adfc2c82524918224cf19fec5b7fcf6d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="unionsi47x__firmware__query__library" kindref="compound">si47x_firmware_query_library</ref></type>
        <definition>si47x_firmware_query_library SI4735::queryLibraryId</definition>
        <argsstring>()</argsstring>
        <name>queryLibraryId</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Call it first if you are applying a patch on <ref refid="class_s_i4735" kindref="compound">SI4735</ref>. Used to confirm if the patch is compatible with the internal device library revision. See Si47XX PROGRAMMING GUIDE; AN332; pages 64 and 215-220.</para>
<para><simplesect kind="return"><para>a struct <ref refid="unionsi47x__firmware__query__library" kindref="compound">si47x_firmware_query_library</ref> (see it in <ref refid="_s_i4735_8h" kindref="compound">SI4735.h</ref>) Query the library information</para>
</simplesect>
You have to call this function if you are applying a patch on SI47XX (SI4735-D60)</para>
<para>The first command that is sent to the device is the POWER_UP command to confirm that the patch is compatible with the internal device library revision. The device moves into the powerup mode, returns the reply, and moves into the powerdown mode. The POWER_UP command is sent to the device again to configure the mode of the device and additionally is used to start the patching process. When applying the patch, the PATCH bit in ARG1 of the POWER_UP command must be set to 1 to begin the patching process. [AN332 page 219].</para>
<para><simplesect kind="see"><para>Si47XX PROGRAMMING GUIDE; AN332; pages 214, 215, 216, 219 </para>
</simplesect>
<simplesect kind="see"><para><ref refid="unionsi47x__firmware__query__library" kindref="compound">si47x_firmware_query_library</ref> in <ref refid="_s_i4735_8h" kindref="compound">SI4735.h</ref></para>
</simplesect>
<simplesect kind="return"><para><ref refid="unionsi47x__firmware__query__library" kindref="compound">si47x_firmware_query_library</ref> Library Identification </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="1032" column="34" bodyfile="SI4735.cpp" bodystart="2053" bodyend="2079"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1afaabd6c73b7ad7c20ae959d5b75c1e71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::patchPowerUp</definition>
        <argsstring>()</argsstring>
        <name>patchPowerUp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method can be used to prepare the device to apply SSBRX patch Call queryLibraryId before call this method. Powerup the device by issuing the POWER_UP command with FUNC = 1 (AM/SW/LW Receive)</para>
<para><simplesect kind="see"><para>Si47XX PROGRAMMING GUIDE; AN332; pages 64 and 215-220 and </para>
</simplesect>
<simplesect kind="see"><para>AN332 REV 0.8 UNIVERSAL PROGRAMMING GUIDE AMENDMENT FOR SI4735-D60 SSB AND NBFM PATCHES; page 7. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="1033" column="10" bodyfile="SI4735.cpp" bodystart="2089" bodyend="2098"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1afd1343bd8b4f0c290ef81c418222036c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SI4735::downloadPatch</definition>
        <argsstring>(const uint8_t *ssb_patch_content, const uint16_t ssb_patch_content_size)</argsstring>
        <name>downloadPatch</name>
        <param>
          <type>const uint8_t *</type>
          <declname>ssb_patch_content</declname>
        </param>
        <param>
          <type>const uint16_t</type>
          <declname>ssb_patch_content_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Transfers the content of a patch stored in a array of bytes to the <ref refid="class_s_i4735" kindref="compound">SI4735</ref> device. You must mount an array as shown below and know the size of that array as well.</para>
<para>It is importante to say that patches to the <ref refid="class_s_i4735" kindref="compound">SI4735</ref> are distributed in binary form and have to be transferred to the internal RAM of the device by the host MCU (in this case Arduino). Since the RAM is volatile memory, the patch stored into the device gets lost when you turn off the system. Consequently, the content of the patch has to be transferred again to the device each time after turn on the system or reset the device.</para>
<para>The disadvantage of this approach is the amount of memory used by the patch content. This may limit the use of other radio functions you want implemented in Arduino.</para>
<para><simplesect kind="see"><para>Si47XX PROGRAMMING GUIDE; AN332; pages 64 and 215-220. <linebreak/>
</para>
</simplesect>
Example of content: const PROGMEM uint8_t ssb_patch_content_full[] = { // SSB patch for whole SSBRX full download 0x15, 0x00, 0x0F, 0xE0, 0xF2, 0x73, 0x76, 0x2F, 0x16, 0x6F, 0x26, 0x1E, 0x00, 0x4B, 0x2C, 0x58, 0x16, 0xA3, 0x74, 0x0F, 0xE0, 0x4C, 0x36, 0xE4, 0x16, 0x3B, 0x1D, 0x4A, 0xEC, 0x36, 0x28, 0xB7, 0x16, 0x00, 0x3A, 0x47, 0x37, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9D, 0x29}; <linebreak/>
</para>
<para>const int size_content_full = sizeof ssb_patch_content_full;</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ssb_patch_content</parametername>
</parameternamelist>
<parameterdescription>
<para>point to array of bytes content patch. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ssb_patch_content_size</parametername>
</parameternamelist>
<parameterdescription>
<para>array size (number of bytes). The maximum size allowed for a patch is 15856 bytes</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>false if an error is found. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="1034" column="10" bodyfile="SI4735.cpp" bodystart="2168" bodyend="2214"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1aa99cdde8dd65eb92f2ada159cc215c98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SI4735::downloadPatch</definition>
        <argsstring>(int eeprom_i2c_address)</argsstring>
        <name>downloadPatch</name>
        <param>
          <type>int</type>
          <declname>eeprom_i2c_address</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Under construction... Transfers the content of a patch stored in a eeprom to the <ref refid="class_s_i4735" kindref="compound">SI4735</ref> device.</para>
<para>TO USE THIS METHOD YOU HAVE TO HAVE A EEPROM WRITEN WITH THE PATCH CONTENT</para>
<para><simplesect kind="see"><para>the sketch write_ssb_patch_eeprom.ino (TO DO)</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>eeprom_i2c_address</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>false if an error is found. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="1035" column="10" bodyfile="SI4735.cpp" bodystart="2227" bodyend="2287"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a0fcfd8e487c594707b3f2aaa71a86d68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::ssbPowerUp</definition>
        <argsstring>()</argsstring>
        <name>ssbPowerUp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function can be useful for debug and teste. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="1036" column="10" bodyfile="SI4735.cpp" bodystart="2115" bodyend="2131"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1aecfcd50dbb3d95d66c8cdc77d52af63c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::setI2CLowSpeedMode</definition>
        <argsstring>(void)</argsstring>
        <name>setI2CLowSpeedMode</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="1044" column="17" bodyfile="SI4735.h" bodystart="1044" bodyend="1044"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a00ade87631677b8cc88098d0b55cd5a4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::setI2CStandardMode</definition>
        <argsstring>(void)</argsstring>
        <name>setI2CStandardMode</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Sets I2C buss to 10KHz. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="1045" column="17" bodyfile="SI4735.h" bodystart="1045" bodyend="1045"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a7bb3214f70381cf26bb93f96729d641e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::setI2CFastMode</definition>
        <argsstring>(void)</argsstring>
        <name>setI2CFastMode</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Sets I2C buss to 100KHz. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="1046" column="17" bodyfile="SI4735.h" bodystart="1046" bodyend="1046"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a7433b4e80fd3b501efeae7973d29c985" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::setI2CFastModeCustom</definition>
        <argsstring>(long value=500000)</argsstring>
        <name>setI2CFastModeCustom</name>
        <param>
          <type>long</type>
          <declname>value</declname>
          <defval>500000</defval>
        </param>
        <briefdescription>
<para>Sets I2C buss to 400KHz. </para>
        </briefdescription>
        <detaileddescription>
<para>Sets the I2C bus to a given value.</para>
<para>ATTENTION: use this function with cation</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>in Hz. For example: The values 500000 sets the bus to 500KHz. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="1055" column="17" bodyfile="SI4735.h" bodystart="1055" bodyend="1055"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a748a4027f317972cb2fb1aed4865973b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::setDeviceI2CAddress</definition>
        <argsstring>(uint8_t senPin)</argsstring>
        <name>setDeviceI2CAddress</name>
        <param>
          <type>uint8_t</type>
          <declname>senPin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the I2C Bus Address</para>
<para>ATTENTION: The parameter senPin is not the I2C bus address. It is the SEN pin setup of the schematic (eletronic circuit). If it is connected to the ground, call this function with senPin = 0; else senPin = 1. You do not need to use this function if the SEN PIN configured to ground (GND).</para>
<para>The default value is 0x11 (senPin = 0). In this case you have to ground the pin SEN of the SI473X. If you want to change this address, call this function with senPin = 1</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>senPin</parametername>
</parameternamelist>
<parameterdescription>
<para>0 - when the pin SEN (16 on SSOP version or pin 6 on QFN version) is set to low (GND - 0V) 1 - when the pin SEN (16 on SSOP version or pin 6 on QFN version) is set to high (+3.3V) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="1057" column="10" bodyfile="SI4735.cpp" bodystart="108" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a8eddbfb3e62786aa4843d4bcd25da2b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int16_t</type>
        <definition>int16_t SI4735::getDeviceI2CAddress</definition>
        <argsstring>(uint8_t resetPin)</argsstring>
        <name>getDeviceI2CAddress</name>
        <param>
          <type>uint8_t</type>
          <declname>resetPin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Scans for two possible addresses for the Si47XX (0x11 or 0x63 ) This function also sets the system to the found I2C bus address of Si47XX.</para>
<para>You do not need to use this function if the SEN PIN is configured to ground (GND). The default I2C address is 0x11. Use this function if you do not know how the SEN pin is configured.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uint8_t</parametername>
</parameternamelist>
<parameterdescription>
<para>resetPin MCU Mater (Arduino) reset pin </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int16_t 0x11 if the SEN pin of the Si47XX is low or 0x63 if the SEN pin of the Si47XX is HIGH or 0x0 if error. <linebreak/>
 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="1058" column="13" bodyfile="SI4735.cpp" bodystart="63" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="class_s_i4735_1a668008457910e916ebadf15bda2e5b29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SI4735::setDeviceOtherI2CAddress</definition>
        <argsstring>(uint8_t i2cAddr)</argsstring>
        <name>setDeviceOtherI2CAddress</name>
        <param>
          <type>uint8_t</type>
          <declname>i2cAddr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the onther I2C Bus Address (for Si470X) You can set another I2C address different of 0x11 and 0x63 <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uint8_t</parametername>
</parameternamelist>
<parameterdescription>
<para>i2cAddr (example 0x10) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SI4735.h" line="1059" column="10" bodyfile="SI4735.cpp" bodystart="117" bodyend="119"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="8">
        <label>si473x_powerup</label>
        <link refid="unionsi473x__powerup"/>
      </node>
      <node id="9">
        <label>si47x_rqs_status</label>
        <link refid="unionsi47x__rqs__status"/>
      </node>
      <node id="10">
        <label>si47x_frequency</label>
        <link refid="unionsi47x__frequency"/>
      </node>
      <node id="3">
        <label>si47x_response_status</label>
        <link refid="unionsi47x__response__status"/>
      </node>
      <node id="5">
        <label>si47x_set_frequency</label>
        <link refid="unionsi47x__set__frequency"/>
      </node>
      <node id="2">
        <label>si47x_rds_status</label>
        <link refid="unionsi47x__rds__status"/>
      </node>
      <node id="4">
        <label>si47x_ssb_mode</label>
        <link refid="unionsi47x__ssb__mode"/>
      </node>
      <node id="7">
        <label>si47x_firmware_information</label>
        <link refid="unionsi47x__firmware__information"/>
      </node>
      <node id="1">
        <label>SI4735</label>
        <link refid="class_s_i4735"/>
        <childnode refid="2" relation="usage">
          <edgelabel>currentRdsStatus</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>currentStatus</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>currentSSBMode</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>currentFrequencyParams</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>currentAgcStatus</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>firmwareInfo</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>powerUp</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>currentRqsStatus</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>currentFrequency</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>si47x_agc_status</label>
        <link refid="unionsi47x__agc__status"/>
      </node>
    </collaborationgraph>
    <location file="SI4735.h" line="777" column="1" bodyfile="SI4735.h" bodystart="776" bodyend="1059"/>
    <listofallmembers>
      <member refid="class_s_i4735_1a412f51386c47a17cf04fd0a3c3078726" prot="public" virt="non-virtual"><scope>SI4735</scope><name>analogPowerUp</name></member>
      <member refid="class_s_i4735_1adede134b96fd5650b87673ce413babb2" prot="protected" virt="non-virtual"><scope>SI4735</scope><name>clearRdsBuffer0A</name></member>
      <member refid="class_s_i4735_1ac65c552004f5e5e646638e37a5a68213" prot="protected" virt="non-virtual"><scope>SI4735</scope><name>clearRdsBuffer2A</name></member>
      <member refid="class_s_i4735_1aed0988165057aa2880f41b88ac236cd7" prot="protected" virt="non-virtual"><scope>SI4735</scope><name>clearRdsBuffer2B</name></member>
      <member refid="class_s_i4735_1adf2d1f37ec9edf95e14aecb3cdc7417d" prot="protected" virt="non-virtual"><scope>SI4735</scope><name>currentAgcStatus</name></member>
      <member refid="class_s_i4735_1a650490ab792c1853c97f600661ecdaa1" prot="protected" virt="non-virtual"><scope>SI4735</scope><name>currentAvcAmMaxGain</name></member>
      <member refid="class_s_i4735_1a4439c40db789f02371ea0fb9b22650c5" prot="protected" virt="non-virtual"><scope>SI4735</scope><name>currentFrequency</name></member>
      <member refid="class_s_i4735_1a8253ae2f3c87a6943776f8a63a691ca3" prot="protected" virt="non-virtual"><scope>SI4735</scope><name>currentFrequencyParams</name></member>
      <member refid="class_s_i4735_1aa3d41ad3fdb9d821a721a8acfaf47670" prot="protected" virt="non-virtual"><scope>SI4735</scope><name>currentMaximumFrequency</name></member>
      <member refid="class_s_i4735_1a4663c1c92d980472556368944cb2fc68" prot="protected" virt="non-virtual"><scope>SI4735</scope><name>currentMinimumFrequency</name></member>
      <member refid="class_s_i4735_1a42d5c6991d90ea1c8ae35b74f8bccc48" prot="protected" virt="non-virtual"><scope>SI4735</scope><name>currentRdsStatus</name></member>
      <member refid="class_s_i4735_1a9edd8cc9254695631795e7efc008eb28" prot="protected" virt="non-virtual"><scope>SI4735</scope><name>currentRqsStatus</name></member>
      <member refid="class_s_i4735_1a74ee9c99b1e092f7b1efa2f771f38324" prot="protected" virt="non-virtual"><scope>SI4735</scope><name>currentSSBMode</name></member>
      <member refid="class_s_i4735_1a05730ca069db4be7c45a9c92f29d3b52" prot="protected" virt="non-virtual"><scope>SI4735</scope><name>currentSsbStatus</name></member>
      <member refid="class_s_i4735_1a7ad35ba002b73b66e9ce97b304854695" prot="protected" virt="non-virtual"><scope>SI4735</scope><name>currentStatus</name></member>
      <member refid="class_s_i4735_1ad72759f246cceb147bf031b72173b0ca" prot="protected" virt="non-virtual"><scope>SI4735</scope><name>currentStep</name></member>
      <member refid="class_s_i4735_1acc3d3a411d181e08846219661dbde1c4" prot="protected" virt="non-virtual"><scope>SI4735</scope><name>currentTune</name></member>
      <member refid="class_s_i4735_1a9da4f3df9e5e6b0448eff15e12f690dd" prot="protected" virt="non-virtual"><scope>SI4735</scope><name>currentWorkFrequency</name></member>
      <member refid="class_s_i4735_1a243ecc7d01fc0d0e9cabb4ed00b9e47d" prot="protected" virt="non-virtual"><scope>SI4735</scope><name>deviceAddress</name></member>
      <member refid="class_s_i4735_1aea652d358b4b586b6d5964ceb8eb7c81" prot="public" virt="non-virtual"><scope>SI4735</scope><name>digitalOutputFormat</name></member>
      <member refid="class_s_i4735_1a1a404ca11fb32b457be2d7cfe484dd03" prot="public" virt="non-virtual"><scope>SI4735</scope><name>digitalOutputSampleRate</name></member>
      <member refid="class_s_i4735_1ae4683e9a9fc7a633305b18dae54fbd83" prot="protected" virt="non-virtual"><scope>SI4735</scope><name>disableFmDebug</name></member>
      <member refid="class_s_i4735_1afd1343bd8b4f0c290ef81c418222036c" prot="public" virt="non-virtual"><scope>SI4735</scope><name>downloadPatch</name></member>
      <member refid="class_s_i4735_1aa99cdde8dd65eb92f2ada159cc215c98" prot="public" virt="non-virtual"><scope>SI4735</scope><name>downloadPatch</name></member>
      <member refid="class_s_i4735_1ad03d545e53a7ca2fe072a7b03d60910e" prot="protected" virt="non-virtual"><scope>SI4735</scope><name>firmwareInfo</name></member>
      <member refid="class_s_i4735_1a93fff524a6f900ac91eb1222ce73f9ba" prot="public" virt="non-virtual"><scope>SI4735</scope><name>frequencyDown</name></member>
      <member refid="class_s_i4735_1ac0fcfd64dcf30b11d4dc219d9f7fc5d9" prot="public" virt="non-virtual"><scope>SI4735</scope><name>frequencyUp</name></member>
      <member refid="class_s_i4735_1ab8a51de592fd40fdd872039b3c70716f" prot="public" virt="non-virtual"><scope>SI4735</scope><name>getACFIndicator</name></member>
      <member refid="class_s_i4735_1a4eceaf5745e87fcca6cf31c04c5635bd" prot="public" virt="non-virtual"><scope>SI4735</scope><name>getAgcGainIndex</name></member>
      <member refid="class_s_i4735_1a3905d6551992b4dd51d13f05978d9081" prot="public" virt="non-virtual"><scope>SI4735</scope><name>getAntennaTuningCapacitor</name></member>
      <member refid="class_s_i4735_1aaae187575b9868ff427c063c3a6cca2a" prot="public" virt="non-virtual"><scope>SI4735</scope><name>getAutomaticGainControl</name></member>
      <member refid="class_s_i4735_1a19e96565a2dec7ec68469f45c8d3e084" prot="public" virt="non-virtual"><scope>SI4735</scope><name>getBandLimit</name></member>
      <member refid="class_s_i4735_1affe5cee9daf44677802a94f96d893c94" prot="public" virt="non-virtual"><scope>SI4735</scope><name>getCurrentAfcRailIndicator</name></member>
      <member refid="class_s_i4735_1a27dd7dfd46583eb5be91cfc9461807ff" prot="public" virt="non-virtual"><scope>SI4735</scope><name>getCurrentAvcAmMaxGain</name></member>
      <member refid="class_s_i4735_1a16107a2f2e51cce5a7e2b1b303425118" prot="public" virt="non-virtual"><scope>SI4735</scope><name>getCurrentBlendDetectInterrupt</name></member>
      <member refid="class_s_i4735_1a8240278970ae8bf7283e14714b4329ad" prot="public" virt="non-virtual"><scope>SI4735</scope><name>getCurrentFrequency</name></member>
      <member refid="class_s_i4735_1a6d521bb5c7ef7811e57c7128cb2106b3" prot="public" virt="non-virtual"><scope>SI4735</scope><name>getCurrentMultipath</name></member>
      <member refid="class_s_i4735_1a82d0865cf348deb0c9f81a2f12222fb0" prot="public" virt="non-virtual"><scope>SI4735</scope><name>getCurrentMultipathDetectHigh</name></member>
      <member refid="class_s_i4735_1ad194a5c915620c6a1b8b3d6d7ed645d9" prot="public" virt="non-virtual"><scope>SI4735</scope><name>getCurrentMultipathDetectLow</name></member>
      <member refid="class_s_i4735_1a127fa3d2f9b7d57169bbef95703fb4c9" prot="public" virt="non-virtual"><scope>SI4735</scope><name>getCurrentPilot</name></member>
      <member refid="class_s_i4735_1abf59183da13c72384093fc238c3114cf" prot="public" virt="non-virtual"><scope>SI4735</scope><name>getCurrentReceivedSignalQuality</name></member>
      <member refid="class_s_i4735_1a7393fa4f9d7811c8d0c0f48283ef6435" prot="public" virt="non-virtual"><scope>SI4735</scope><name>getCurrentReceivedSignalQuality</name></member>
      <member refid="class_s_i4735_1a4f5abf562ec00767a3b84f74eba5ac4d" prot="public" virt="non-virtual"><scope>SI4735</scope><name>getCurrentRSSI</name></member>
      <member refid="class_s_i4735_1adf11a66236392ca107b5d52a8747f838" prot="public" virt="non-virtual"><scope>SI4735</scope><name>getCurrentRssiDetectHigh</name></member>
      <member refid="class_s_i4735_1a0c9ae82012cdc97c4080b84e37fa1820" prot="public" virt="non-virtual"><scope>SI4735</scope><name>getCurrentRssiDetectLow</name></member>
      <member refid="class_s_i4735_1a2b3bfeca3b545f5741b1ed70a1dba077" prot="public" virt="non-virtual"><scope>SI4735</scope><name>getCurrentSignedFrequencyOffset</name></member>
      <member refid="class_s_i4735_1adb3fe55583dafeac7439a303b637d162" prot="public" virt="non-virtual"><scope>SI4735</scope><name>getCurrentSNR</name></member>
      <member refid="class_s_i4735_1aec3c71a3252dd6660e5bceebc0d1f988" prot="public" virt="non-virtual"><scope>SI4735</scope><name>getCurrentSnrDetectHigh</name></member>
      <member refid="class_s_i4735_1a1296592571c85b89ed59a4ee2324bd52" prot="public" virt="non-virtual"><scope>SI4735</scope><name>getCurrentSnrDetectLow</name></member>
      <member refid="class_s_i4735_1a76e8485292878c1294e5910601f4575f" prot="public" virt="non-virtual"><scope>SI4735</scope><name>getCurrentSoftMuteIndicator</name></member>
      <member refid="class_s_i4735_1acaafab62dd411dc9b79f9fb96e8c8832" prot="public" virt="non-virtual"><scope>SI4735</scope><name>getCurrentStereoBlend</name></member>
      <member refid="class_s_i4735_1a5ce1abf8c9d53c027f6b0870efedda1b" prot="public" virt="non-virtual"><scope>SI4735</scope><name>getCurrentValidChannel</name></member>
      <member refid="class_s_i4735_1a430b86ccfd4d6c89da9202a538e0cfc9" prot="public" virt="non-virtual"><scope>SI4735</scope><name>getCurrentVolume</name></member>
      <member refid="class_s_i4735_1a8eddbfb3e62786aa4843d4bcd25da2b9" prot="public" virt="non-virtual"><scope>SI4735</scope><name>getDeviceI2CAddress</name></member>
      <member refid="class_s_i4735_1a2fbc7e2187a7c645879623100dbc8502" prot="public" virt="non-virtual"><scope>SI4735</scope><name>getFirmware</name></member>
      <member refid="class_s_i4735_1acd363d9111e4a57cf2e1167634bc1b5f" prot="public" virt="non-virtual"><scope>SI4735</scope><name>getFirmwareCHIPREV</name></member>
      <member refid="class_s_i4735_1ab57870d69969e73265e9cffe2a73d868" prot="public" virt="non-virtual"><scope>SI4735</scope><name>getFirmwareCMPMAJOR</name></member>
      <member refid="class_s_i4735_1a883645d266a612ce07d71fdb2cd81e5f" prot="public" virt="non-virtual"><scope>SI4735</scope><name>getFirmwareCMPMINOR</name></member>
      <member refid="class_s_i4735_1ac2f451cb7320b66d8e08698dcacd50d0" prot="public" virt="non-virtual"><scope>SI4735</scope><name>getFirmwareFWMAJOR</name></member>
      <member refid="class_s_i4735_1a74b68fcd5718520fc0683977dfc18fc8" prot="public" virt="non-virtual"><scope>SI4735</scope><name>getFirmwareFWMINOR</name></member>
      <member refid="class_s_i4735_1a58b99a8d5ec2199cb5f2105675aa7a56" prot="public" virt="non-virtual"><scope>SI4735</scope><name>getFirmwarePATCHH</name></member>
      <member refid="class_s_i4735_1ac10b3cd3875985e2c129fea14e2bc47a" prot="public" virt="non-virtual"><scope>SI4735</scope><name>getFirmwarePATCHL</name></member>
      <member refid="class_s_i4735_1ab26fbd99452daaf18875ff1c3c35d081" prot="public" virt="non-virtual"><scope>SI4735</scope><name>getFirmwarePN</name></member>
      <member refid="class_s_i4735_1a7e88bb573604d465536c13554d5c61f8" prot="public" virt="non-virtual"><scope>SI4735</scope><name>getFrequency</name></member>
      <member refid="class_s_i4735_1a8db437efc42a81466d8daf4dcc35c50c" prot="public" virt="non-virtual"><scope>SI4735</scope><name>getGroupLost</name></member>
      <member refid="class_s_i4735_1ab1f4f137139b40fe386ca51586999e50" prot="public" virt="non-virtual"><scope>SI4735</scope><name>getNext2Block</name></member>
      <member refid="class_s_i4735_1adb0a3c39aeacba0faf39aadd9465021f" prot="public" virt="non-virtual"><scope>SI4735</scope><name>getNext4Block</name></member>
      <member refid="class_s_i4735_1a819c370ff03c52a527fbc85f9877f526" prot="public" virt="non-virtual"><scope>SI4735</scope><name>getNumRdsFifoUsed</name></member>
      <member refid="class_s_i4735_1a97dc44d9927ea58730a18fb6baa6867f" prot="public" virt="non-virtual"><scope>SI4735</scope><name>getRadioDataSystemInterrupt</name></member>
      <member refid="class_s_i4735_1a05f76a0a0ebda813483f1df24e890904" prot="public" virt="non-virtual"><scope>SI4735</scope><name>getRdsFlagAB</name></member>
      <member refid="class_s_i4735_1aa35366e5cded7b864f7268a7e4a8dbe9" prot="public" virt="non-virtual"><scope>SI4735</scope><name>getRdsGroupType</name></member>
      <member refid="class_s_i4735_1a561a052a8c737302368274c774d8c129" prot="public" virt="non-virtual"><scope>SI4735</scope><name>getRdsNewBlockA</name></member>
      <member refid="class_s_i4735_1aff740d85cc04c257f53c7e910bd45fcf" prot="public" virt="non-virtual"><scope>SI4735</scope><name>getRdsNewBlockB</name></member>
      <member refid="class_s_i4735_1af1e67b201799a9e8d7208a32a65656b5" prot="public" virt="non-virtual"><scope>SI4735</scope><name>getRdsPI</name></member>
      <member refid="class_s_i4735_1ac28fa3818d4f900c4f4ba6be10c1405b" prot="public" virt="non-virtual"><scope>SI4735</scope><name>getRdsProgramType</name></member>
      <member refid="class_s_i4735_1a6e8405ea5846fab586080a7be696178e" prot="public" virt="non-virtual"><scope>SI4735</scope><name>getRdsReceived</name></member>
      <member refid="class_s_i4735_1a350a2033671a7620d4b9290a2347e185" prot="public" virt="non-virtual"><scope>SI4735</scope><name>getRdsStatus</name></member>
      <member refid="class_s_i4735_1a94cce3834f85fc127e8c2dab3a03e875" prot="public" virt="non-virtual"><scope>SI4735</scope><name>getRdsStatus</name></member>
      <member refid="class_s_i4735_1a6e899b37cbc3dcd0ab969724e4008f0f" prot="public" virt="non-virtual"><scope>SI4735</scope><name>getRdsSync</name></member>
      <member refid="class_s_i4735_1a78e906f12771490771c624be1777784d" prot="public" virt="non-virtual"><scope>SI4735</scope><name>getRdsSyncFound</name></member>
      <member refid="class_s_i4735_1ac283a8a89cc885c2740c65a7128ff7ef" prot="public" virt="non-virtual"><scope>SI4735</scope><name>getRdsSyncLost</name></member>
      <member refid="class_s_i4735_1a71cbaa3e0c103db7cee5969d162bec5d" prot="public" virt="non-virtual"><scope>SI4735</scope><name>getRdsText</name></member>
      <member refid="class_s_i4735_1a12d917629b78fffebac5ecf8f2936921" prot="public" virt="non-virtual"><scope>SI4735</scope><name>getRdsText0A</name></member>
      <member refid="class_s_i4735_1ae54d0f5562ca7615c3b90bee00c29ab4" prot="public" virt="non-virtual"><scope>SI4735</scope><name>getRdsText2A</name></member>
      <member refid="class_s_i4735_1a806d5cfbbeb6ca1299ce20b1220fdb18" prot="public" virt="non-virtual"><scope>SI4735</scope><name>getRdsText2B</name></member>
      <member refid="class_s_i4735_1ab1ed04a109330e7e9206483c7cdf5ef9" prot="public" virt="non-virtual"><scope>SI4735</scope><name>getRdsTextSegmentAddress</name></member>
      <member refid="class_s_i4735_1aa8436bb156f3ac8321c65941be42fdba" prot="public" virt="non-virtual"><scope>SI4735</scope><name>getRdsTime</name></member>
      <member refid="class_s_i4735_1af9b6cb614d1b01b11bb23c19e6deb8b9" prot="public" virt="non-virtual"><scope>SI4735</scope><name>getRdsVersionCode</name></member>
      <member refid="class_s_i4735_1aeeefd12b49dbc764e0f45fe208441482" prot="public" virt="non-virtual"><scope>SI4735</scope><name>getReceivedSignalStrengthIndicator</name></member>
      <member refid="class_s_i4735_1ad194137a6a712a599e3c26e5b6357594" prot="public" virt="non-virtual"><scope>SI4735</scope><name>getSignalQualityInterrupt</name></member>
      <member refid="class_s_i4735_1a3cf856c44fcfffb3d81b22b1d09b881f" prot="public" virt="non-virtual"><scope>SI4735</scope><name>getStatus</name></member>
      <member refid="class_s_i4735_1a5c0f4036a7fbbd11a26f1f6f4579d3cd" prot="public" virt="non-virtual"><scope>SI4735</scope><name>getStatus</name></member>
      <member refid="class_s_i4735_1afcb38f53b6eb71cadcefa0bb472ca943" prot="public" virt="non-virtual"><scope>SI4735</scope><name>getStatusCTS</name></member>
      <member refid="class_s_i4735_1a69723840497ed693d6f9a4e840ab07c9" prot="public" virt="non-virtual"><scope>SI4735</scope><name>getStatusError</name></member>
      <member refid="class_s_i4735_1a0f9b5438a6f92c8f2e538ee640f353ab" prot="public" virt="non-virtual"><scope>SI4735</scope><name>getStatusMULT</name></member>
      <member refid="class_s_i4735_1ac0bd4daaa321ef8956dca4d1e4e5cd3c" prot="public" virt="non-virtual"><scope>SI4735</scope><name>getStatusSNR</name></member>
      <member refid="class_s_i4735_1afb19da8a05320d7f38cca8325725edfd" prot="public" virt="non-virtual"><scope>SI4735</scope><name>getStatusValid</name></member>
      <member refid="class_s_i4735_1a2cc659bddc5efc7695f2a6031c2edd4b" prot="public" virt="non-virtual"><scope>SI4735</scope><name>getTuneCompleteTriggered</name></member>
      <member refid="class_s_i4735_1a8c54bfc1fcf1dd989e697cc9b7094f59" prot="public" virt="non-virtual"><scope>SI4735</scope><name>getTuneFrequencyFast</name></member>
      <member refid="class_s_i4735_1a667fead0c7b2658c2b932370ad4e4f88" prot="public" virt="non-virtual"><scope>SI4735</scope><name>getTuneFrequencyFreeze</name></member>
      <member refid="class_s_i4735_1acf79be50a01fe91abd498e5d42d83317" prot="public" virt="non-virtual"><scope>SI4735</scope><name>getVolume</name></member>
      <member refid="class_s_i4735_1af8f8123888060f858c74ba08a29ff38b" prot="protected" virt="non-virtual"><scope>SI4735</scope><name>interruptPin</name></member>
      <member refid="class_s_i4735_1aea08b7e553212cbe01bf6f4ec9e02de7" prot="public" virt="non-virtual"><scope>SI4735</scope><name>isAgcEnabled</name></member>
      <member refid="class_s_i4735_1ae7ca2ffa6ad68ca69e4f35a3c40bbc3c" prot="public" virt="non-virtual"><scope>SI4735</scope><name>isCurrentTuneFM</name></member>
      <member refid="class_s_i4735_1a157e4ae8cd53396973584aa10888cd47" prot="protected" virt="non-virtual"><scope>SI4735</scope><name>lastMode</name></member>
      <member refid="class_s_i4735_1abd965c0e49493bc2c7c37547d36dcc96" prot="protected" virt="non-virtual"><scope>SI4735</scope><name>lastTextFlagAB</name></member>
      <member refid="class_s_i4735_1afaabd6c73b7ad7c20ae959d5b75c1e71" prot="public" virt="non-virtual"><scope>SI4735</scope><name>patchPowerUp</name></member>
      <member refid="class_s_i4735_1aa554b3390fb6c5a4d6661b96afae73ae" prot="public" virt="non-virtual"><scope>SI4735</scope><name>powerDown</name></member>
      <member refid="class_s_i4735_1a1331b701088bda20bf0844e2e38be142" prot="protected" virt="non-virtual"><scope>SI4735</scope><name>powerUp</name></member>
      <member refid="class_s_i4735_1adfc2c82524918224cf19fec5b7fcf6d1" prot="public" virt="non-virtual"><scope>SI4735</scope><name>queryLibraryId</name></member>
      <member refid="class_s_i4735_1a3e228da65641f4dcf4253262e19bde9b" prot="public" virt="non-virtual"><scope>SI4735</scope><name>radioPowerUp</name></member>
      <member refid="class_s_i4735_1ac24a8bbd39628c2981208cb452165a0e" prot="protected" virt="non-virtual"><scope>SI4735</scope><name>rds_buffer0A</name></member>
      <member refid="class_s_i4735_1a0b40791484c47c0bf90d8dc255a20269" prot="protected" virt="non-virtual"><scope>SI4735</scope><name>rds_buffer2A</name></member>
      <member refid="class_s_i4735_1a7aa607f80e97d45ac7a80cdcbdeb09f9" prot="protected" virt="non-virtual"><scope>SI4735</scope><name>rds_buffer2B</name></member>
      <member refid="class_s_i4735_1a1746daa81b363880dd106fa430784bf8" prot="protected" virt="non-virtual"><scope>SI4735</scope><name>rds_time</name></member>
      <member refid="class_s_i4735_1affdba9ca9fb9bf5bb671ac3d448a7e89" prot="public" virt="non-virtual"><scope>SI4735</scope><name>RdsInit</name></member>
      <member refid="class_s_i4735_1a11477d1eb13efb348395a4984b67f392" prot="protected" virt="non-virtual"><scope>SI4735</scope><name>rdsTextAdress0A</name></member>
      <member refid="class_s_i4735_1a1c7ec3559a78c5ef1bda49cb0abdf1de" prot="protected" virt="non-virtual"><scope>SI4735</scope><name>rdsTextAdress2A</name></member>
      <member refid="class_s_i4735_1adecc2478d73cd7d18e1f88fd70d1488d" prot="protected" virt="non-virtual"><scope>SI4735</scope><name>rdsTextAdress2B</name></member>
      <member refid="class_s_i4735_1adc6014674bd4d1ee3aab56c605926db1" prot="public" virt="non-virtual"><scope>SI4735</scope><name>reset</name></member>
      <member refid="class_s_i4735_1a6470177f747ef7eb8e7d02c76f72b19e" prot="protected" virt="non-virtual"><scope>SI4735</scope><name>resetPin</name></member>
      <member refid="class_s_i4735_1a3280b98b8331f00b4d0158ef1b076533" prot="public" virt="non-virtual"><scope>SI4735</scope><name>seekStation</name></member>
      <member refid="class_s_i4735_1a1eeaa09670cdbdc7ddd724c940d2506b" prot="public" virt="non-virtual"><scope>SI4735</scope><name>seekStationDown</name></member>
      <member refid="class_s_i4735_1aad5211e3fff28141473442f59008e415" prot="public" virt="non-virtual"><scope>SI4735</scope><name>seekStationUp</name></member>
      <member refid="class_s_i4735_1ae351181347f8c512b625d98ef7844961" prot="protected" virt="non-virtual"><scope>SI4735</scope><name>sendProperty</name></member>
      <member refid="class_s_i4735_1ae1d866bfc4cb37c4268c8942b4b4d062" prot="protected" virt="non-virtual"><scope>SI4735</scope><name>sendSSBModeProperty</name></member>
      <member refid="class_s_i4735_1a753390952a1f2c2a98343979f1f3daa0" prot="public" virt="non-virtual"><scope>SI4735</scope><name>setAM</name></member>
      <member refid="class_s_i4735_1a43c5ea36995a3897820e0170d94c81f4" prot="public" virt="non-virtual"><scope>SI4735</scope><name>setAM</name></member>
      <member refid="class_s_i4735_1acc57f6bde08e94462a9d75fe28a66ea8" prot="public" virt="non-virtual"><scope>SI4735</scope><name>setAmSoftMuteMaxAttenuation</name></member>
      <member refid="class_s_i4735_1ac1af311f799e8a007cbd048a88f1abe9" prot="public" virt="non-virtual"><scope>SI4735</scope><name>setAmSoftMuteMaxAttenuation</name></member>
      <member refid="class_s_i4735_1a12d4e173d096b1568e4209a63534d4f6" prot="public" virt="non-virtual"><scope>SI4735</scope><name>setAudioMute</name></member>
      <member refid="class_s_i4735_1a27c22f5671ce3229e925e5fbe93ba0a6" prot="public" virt="non-virtual"><scope>SI4735</scope><name>setAutomaticGainControl</name></member>
      <member refid="class_s_i4735_1a98d12da4b801493a350ecf770f4f2d8b" prot="public" virt="non-virtual"><scope>SI4735</scope><name>setAvcAmMaxGain</name></member>
      <member refid="class_s_i4735_1a6e1e0e48d71e09debb07fc6dbe884829" prot="public" virt="non-virtual"><scope>SI4735</scope><name>setAvcAmMaxGain</name></member>
      <member refid="class_s_i4735_1a8755743a36d2d4662c8db918d02ee4e1" prot="public" virt="non-virtual"><scope>SI4735</scope><name>setBandwidth</name></member>
      <member refid="class_s_i4735_1a748a4027f317972cb2fb1aed4865973b" prot="public" virt="non-virtual"><scope>SI4735</scope><name>setDeviceI2CAddress</name></member>
      <member refid="class_s_i4735_1a668008457910e916ebadf15bda2e5b29" prot="public" virt="non-virtual"><scope>SI4735</scope><name>setDeviceOtherI2CAddress</name></member>
      <member refid="class_s_i4735_1acd89e7b8adefcbc4e89f802acb915906" prot="public" virt="non-virtual"><scope>SI4735</scope><name>setFM</name></member>
      <member refid="class_s_i4735_1a673bc4b17d564bb6e7f3e9a61d35fbb3" prot="public" virt="non-virtual"><scope>SI4735</scope><name>setFM</name></member>
      <member refid="class_s_i4735_1adf4c5ec4473fd8486dd2ec7a19a10d24" prot="public" virt="non-virtual"><scope>SI4735</scope><name>setFmBlendMonoThreshold</name></member>
      <member refid="class_s_i4735_1acc9fd27b38f49f167facfcc4f6216c5e" prot="public" virt="non-virtual"><scope>SI4735</scope><name>setFmBlendMultiPathMonoThreshold</name></member>
      <member refid="class_s_i4735_1a0ed776a193fb2fcff783d4a82ff714e5" prot="public" virt="non-virtual"><scope>SI4735</scope><name>setFmBlendMultiPathStereoThreshold</name></member>
      <member refid="class_s_i4735_1a1b134a94138b3bf993a5d3eb5f8ed5c6" prot="public" virt="non-virtual"><scope>SI4735</scope><name>setFmBLendRssiMonoThreshold</name></member>
      <member refid="class_s_i4735_1ab063630466dccea3becc11d60d122904" prot="public" virt="non-virtual"><scope>SI4735</scope><name>setFmBlendRssiStereoThreshold</name></member>
      <member refid="class_s_i4735_1ae2c30536e59f6691d990a2b9cf21f07e" prot="public" virt="non-virtual"><scope>SI4735</scope><name>setFmBLendSnrMonoThreshold</name></member>
      <member refid="class_s_i4735_1a1d1a5eed976370d99827ba55d08b9293" prot="public" virt="non-virtual"><scope>SI4735</scope><name>setFmBlendSnrStereoThreshold</name></member>
      <member refid="class_s_i4735_1ac598865516ca09db7dbfa6a84da7f179" prot="public" virt="non-virtual"><scope>SI4735</scope><name>setFmBlendStereoThreshold</name></member>
      <member refid="class_s_i4735_1a59ce1008944ff9a51b6c5baeb3a3e2cb" prot="public" virt="non-virtual"><scope>SI4735</scope><name>setFmStereoOff</name></member>
      <member refid="class_s_i4735_1a52c7b7b1f0ed9121b0e64516b2bd2a55" prot="public" virt="non-virtual"><scope>SI4735</scope><name>setFmStereoOn</name></member>
      <member refid="class_s_i4735_1a63d205f2d3169ba877a2bd2ee28d224f" prot="public" virt="non-virtual"><scope>SI4735</scope><name>setFrequency</name></member>
      <member refid="class_s_i4735_1a794f6fe7987e146a0135b8e6fabec55c" prot="public" virt="non-virtual"><scope>SI4735</scope><name>setFrequencyStep</name></member>
      <member refid="class_s_i4735_1a39f0e95a5efe5bd9add926c6f538528a" prot="public" virt="non-virtual"><scope>SI4735</scope><name>setFunction</name></member>
      <member refid="class_s_i4735_1a7bb3214f70381cf26bb93f96729d641e" prot="public" virt="non-virtual"><scope>SI4735</scope><name>setI2CFastMode</name></member>
      <member refid="class_s_i4735_1a7433b4e80fd3b501efeae7973d29c985" prot="public" virt="non-virtual"><scope>SI4735</scope><name>setI2CFastModeCustom</name></member>
      <member refid="class_s_i4735_1aecfcd50dbb3d95d66c8cdc77d52af63c" prot="public" virt="non-virtual"><scope>SI4735</scope><name>setI2CLowSpeedMode</name></member>
      <member refid="class_s_i4735_1a00ade87631677b8cc88098d0b55cd5a4" prot="public" virt="non-virtual"><scope>SI4735</scope><name>setI2CStandardMode</name></member>
      <member refid="class_s_i4735_1a8bc001cb28dc8fbd88ba0fa7024eca39" prot="public" virt="non-virtual"><scope>SI4735</scope><name>setPowerUp</name></member>
      <member refid="class_s_i4735_1ad9718a85c79a311c26997bbda20f2351" prot="public" virt="non-virtual"><scope>SI4735</scope><name>setRdsConfig</name></member>
      <member refid="class_s_i4735_1a530e64d00d95b4ceb13ce33aa74c63cb" prot="public" virt="non-virtual"><scope>SI4735</scope><name>setRdsIntSource</name></member>
      <member refid="class_s_i4735_1ae9d50b24642784943fefedbac944a8e8" prot="public" virt="non-virtual"><scope>SI4735</scope><name>setSBBSidebandCutoffFilter</name></member>
      <member refid="class_s_i4735_1a6b901d5cd729364dbda6e5b811dc9ec2" prot="public" virt="non-virtual"><scope>SI4735</scope><name>setSeekAmLimits</name></member>
      <member refid="class_s_i4735_1a6f8218c0bbdcb75ea54bc8af2a60dcc6" prot="public" virt="non-virtual"><scope>SI4735</scope><name>setSeekAmSpacing</name></member>
      <member refid="class_s_i4735_1a13397b273f7ab6fa7d5f48f116edac9b" prot="public" virt="non-virtual"><scope>SI4735</scope><name>setSeekRssiThreshold</name></member>
      <member refid="class_s_i4735_1aeef76371500acdbdc17ca8dc980e1fff" prot="public" virt="non-virtual"><scope>SI4735</scope><name>setSeekSrnThreshold</name></member>
      <member refid="class_s_i4735_1a7c48f2af416b1f89dbedbfbe9a637620" prot="public" virt="non-virtual"><scope>SI4735</scope><name>setSSB</name></member>
      <member refid="class_s_i4735_1a3e907ddf560a0c8286fa55768701b3da" prot="public" virt="non-virtual"><scope>SI4735</scope><name>setSSB</name></member>
      <member refid="class_s_i4735_1a6b2ad4d027463262350134490d16bf32" prot="public" virt="non-virtual"><scope>SI4735</scope><name>setSSBAudioBandwidth</name></member>
      <member refid="class_s_i4735_1acacf1dac4c0ec170d1da629dd1fd30cb" prot="public" virt="non-virtual"><scope>SI4735</scope><name>setSSBAutomaticVolumeControl</name></member>
      <member refid="class_s_i4735_1afc5e87c50a1eba6de9504c114cc1cb70" prot="public" virt="non-virtual"><scope>SI4735</scope><name>setSSBAvcDivider</name></member>
      <member refid="class_s_i4735_1a55cf9a091d314a1aa21552f2254f756f" prot="public" virt="non-virtual"><scope>SI4735</scope><name>setSSBBfo</name></member>
      <member refid="class_s_i4735_1a9224e7d4ef14c887da96dbefd2dcefd3" prot="public" virt="non-virtual"><scope>SI4735</scope><name>setSSBConfig</name></member>
      <member refid="class_s_i4735_1a6cde26a5abf759a628012d1457d85c72" prot="public" virt="non-virtual"><scope>SI4735</scope><name>setSSBDspAfc</name></member>
      <member refid="class_s_i4735_1a91251dfc2ff9488aaef3aa1a528097d9" prot="public" virt="non-virtual"><scope>SI4735</scope><name>setSSBSoftMute</name></member>
      <member refid="class_s_i4735_1ad357ccc5f207ec11d36d9569046c098f" prot="public" virt="non-virtual"><scope>SI4735</scope><name>setSsbSoftMuteMaxAttenuation</name></member>
      <member refid="class_s_i4735_1afd057daf737a78a50ad1a03a6b43a111" prot="public" virt="non-virtual"><scope>SI4735</scope><name>setSsbSoftMuteMaxAttenuation</name></member>
      <member refid="class_s_i4735_1aaceadaaf0835e3db124d1b36f2aebd3c" prot="public" virt="non-virtual"><scope>SI4735</scope><name>setTuneFrequencyAntennaCapacitor</name></member>
      <member refid="class_s_i4735_1a51d816112d974f10306d9d001667395a" prot="public" virt="non-virtual"><scope>SI4735</scope><name>setTuneFrequencyFast</name></member>
      <member refid="class_s_i4735_1aee22a5ce06d4948fad2365a7b62fbd8d" prot="public" virt="non-virtual"><scope>SI4735</scope><name>setTuneFrequencyFreeze</name></member>
      <member refid="class_s_i4735_1a944ed704e2175a6cf660ad65ca5bbad5" prot="public" virt="non-virtual"><scope>SI4735</scope><name>setup</name></member>
      <member refid="class_s_i4735_1a95fd37277dbb8b16b5ae7a996a5f9eba" prot="public" virt="non-virtual"><scope>SI4735</scope><name>setup</name></member>
      <member refid="class_s_i4735_1a3b7543657dfd36da962267bb8692b796" prot="public" virt="non-virtual"><scope>SI4735</scope><name>setVolume</name></member>
      <member refid="class_s_i4735_1a818c60896490631e4311452c99ff361f" prot="public" virt="non-virtual"><scope>SI4735</scope><name>SI4735</name></member>
      <member refid="class_s_i4735_1a0fcfd8e487c594707b3f2aaa71a86d68" prot="public" virt="non-virtual"><scope>SI4735</scope><name>ssbPowerUp</name></member>
      <member refid="class_s_i4735_1a6f045d3725a457116236ee92d41c4265" prot="public" virt="non-virtual"><scope>SI4735</scope><name>ssbSetup</name></member>
      <member refid="class_s_i4735_1aa5220772c468fcfb69b5d16163de73fc" prot="protected" virt="non-virtual"><scope>SI4735</scope><name>volume</name></member>
      <member refid="class_s_i4735_1a23d49ab35895b76e0898405fac086c09" prot="public" virt="non-virtual"><scope>SI4735</scope><name>volumeDown</name></member>
      <member refid="class_s_i4735_1a5e3e8cf04ca99c6be2dbe15d72b4efa3" prot="public" virt="non-virtual"><scope>SI4735</scope><name>volumeUp</name></member>
      <member refid="class_s_i4735_1ad2e95c88de0dfa58ff7aa36988071421" prot="protected" virt="non-virtual"><scope>SI4735</scope><name>waitInterrupr</name></member>
      <member refid="class_s_i4735_1a7b45c1b22c3c1a3f2326bee913d1e1e0" prot="public" virt="non-virtual"><scope>SI4735</scope><name>waitToSend</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
